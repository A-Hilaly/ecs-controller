// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package service

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/ecs"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/ecs-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.ECS{}
	_ = &svcapitypes.Service{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	if r.ko.Spec.Name != nil {
		input.SetServices([]*string{r.ko.Spec.Name})
	}
	if r.ko.Spec.Cluster != nil {
		input.SetCluster(*r.ko.Spec.Cluster)
	}
	input.Include = []*string{
		aws.String("TAGS"),
	}
	var resp *svcsdk.DescribeServicesOutput
	resp, err = rm.sdkapi.DescribeServicesWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeServices", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "UNKNOWN" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()
	if len(resp.Services) > 0 {
		if *resp.Services[0].Status == "INACTIVE" {
			return nil, ackerr.NotFound
		}
		if *resp.Services[0].Status == "DRAINING" {
			return nil, ackrequeue.NeededAfter(nil, 1000*1000*1000*5)
		}
	}

	found := false
	for _, elem := range resp.Services {
		if elem.CapacityProviderStrategy != nil {
			f0 := []*svcapitypes.CapacityProviderStrategyItem{}
			for _, f0iter := range elem.CapacityProviderStrategy {
				f0elem := &svcapitypes.CapacityProviderStrategyItem{}
				if f0iter.Base != nil {
					f0elem.Base = f0iter.Base
				}
				if f0iter.CapacityProvider != nil {
					f0elem.CapacityProvider = f0iter.CapacityProvider
				}
				if f0iter.Weight != nil {
					f0elem.Weight = f0iter.Weight
				}
				f0 = append(f0, f0elem)
			}
			ko.Spec.CapacityProviderStrategy = f0
		} else {
			ko.Spec.CapacityProviderStrategy = nil
		}
		if elem.ClusterArn != nil {
			ko.Status.ClusterARN = elem.ClusterArn
		} else {
			ko.Status.ClusterARN = nil
		}
		if elem.CreatedAt != nil {
			ko.Status.CreatedAt = &metav1.Time{*elem.CreatedAt}
		} else {
			ko.Status.CreatedAt = nil
		}
		if elem.CreatedBy != nil {
			ko.Status.CreatedBy = elem.CreatedBy
		} else {
			ko.Status.CreatedBy = nil
		}
		if elem.DeploymentConfiguration != nil {
			f4 := &svcapitypes.DeploymentConfiguration{}
			if elem.DeploymentConfiguration.Alarms != nil {
				f4f0 := &svcapitypes.DeploymentAlarms{}
				if elem.DeploymentConfiguration.Alarms.AlarmNames != nil {
					f4f0f0 := []*string{}
					for _, f4f0f0iter := range elem.DeploymentConfiguration.Alarms.AlarmNames {
						var f4f0f0elem string
						f4f0f0elem = *f4f0f0iter
						f4f0f0 = append(f4f0f0, &f4f0f0elem)
					}
					f4f0.AlarmNames = f4f0f0
				}
				if elem.DeploymentConfiguration.Alarms.Enable != nil {
					f4f0.Enable = elem.DeploymentConfiguration.Alarms.Enable
				}
				if elem.DeploymentConfiguration.Alarms.Rollback != nil {
					f4f0.Rollback = elem.DeploymentConfiguration.Alarms.Rollback
				}
				f4.Alarms = f4f0
			}
			if elem.DeploymentConfiguration.DeploymentCircuitBreaker != nil {
				f4f1 := &svcapitypes.DeploymentCircuitBreaker{}
				if elem.DeploymentConfiguration.DeploymentCircuitBreaker.Enable != nil {
					f4f1.Enable = elem.DeploymentConfiguration.DeploymentCircuitBreaker.Enable
				}
				if elem.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback != nil {
					f4f1.Rollback = elem.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback
				}
				f4.DeploymentCircuitBreaker = f4f1
			}
			if elem.DeploymentConfiguration.MaximumPercent != nil {
				f4.MaximumPercent = elem.DeploymentConfiguration.MaximumPercent
			}
			if elem.DeploymentConfiguration.MinimumHealthyPercent != nil {
				f4.MinimumHealthyPercent = elem.DeploymentConfiguration.MinimumHealthyPercent
			}
			ko.Spec.DeploymentConfiguration = f4
		} else {
			ko.Spec.DeploymentConfiguration = nil
		}
		if elem.DeploymentController != nil {
			f5 := &svcapitypes.DeploymentController{}
			if elem.DeploymentController.Type != nil {
				f5.Type = elem.DeploymentController.Type
			}
			ko.Spec.DeploymentController = f5
		} else {
			ko.Spec.DeploymentController = nil
		}
		if elem.Deployments != nil {
			f6 := []*svcapitypes.Deployment{}
			for _, f6iter := range elem.Deployments {
				f6elem := &svcapitypes.Deployment{}
				if f6iter.CapacityProviderStrategy != nil {
					f6elemf0 := []*svcapitypes.CapacityProviderStrategyItem{}
					for _, f6elemf0iter := range f6iter.CapacityProviderStrategy {
						f6elemf0elem := &svcapitypes.CapacityProviderStrategyItem{}
						if f6elemf0iter.Base != nil {
							f6elemf0elem.Base = f6elemf0iter.Base
						}
						if f6elemf0iter.CapacityProvider != nil {
							f6elemf0elem.CapacityProvider = f6elemf0iter.CapacityProvider
						}
						if f6elemf0iter.Weight != nil {
							f6elemf0elem.Weight = f6elemf0iter.Weight
						}
						f6elemf0 = append(f6elemf0, f6elemf0elem)
					}
					f6elem.CapacityProviderStrategy = f6elemf0
				}
				if f6iter.CreatedAt != nil {
					f6elem.CreatedAt = &metav1.Time{*f6iter.CreatedAt}
				}
				if f6iter.DesiredCount != nil {
					f6elem.DesiredCount = f6iter.DesiredCount
				}
				if f6iter.FailedTasks != nil {
					f6elem.FailedTasks = f6iter.FailedTasks
				}
				if f6iter.Id != nil {
					f6elem.ID = f6iter.Id
				}
				if f6iter.LaunchType != nil {
					f6elem.LaunchType = f6iter.LaunchType
				}
				if f6iter.NetworkConfiguration != nil {
					f6elemf6 := &svcapitypes.NetworkConfiguration{}
					if f6iter.NetworkConfiguration.AwsvpcConfiguration != nil {
						f6elemf6f0 := &svcapitypes.AWSVPCConfiguration{}
						if f6iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != nil {
							f6elemf6f0.AssignPublicIP = f6iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp
						}
						if f6iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
							f6elemf6f0f1 := []*string{}
							for _, f6elemf6f0f1iter := range f6iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups {
								var f6elemf6f0f1elem string
								f6elemf6f0f1elem = *f6elemf6f0f1iter
								f6elemf6f0f1 = append(f6elemf6f0f1, &f6elemf6f0f1elem)
							}
							f6elemf6f0.SecurityGroups = f6elemf6f0f1
						}
						if f6iter.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
							f6elemf6f0f2 := []*string{}
							for _, f6elemf6f0f2iter := range f6iter.NetworkConfiguration.AwsvpcConfiguration.Subnets {
								var f6elemf6f0f2elem string
								f6elemf6f0f2elem = *f6elemf6f0f2iter
								f6elemf6f0f2 = append(f6elemf6f0f2, &f6elemf6f0f2elem)
							}
							f6elemf6f0.Subnets = f6elemf6f0f2
						}
						f6elemf6.AWSVPCConfiguration = f6elemf6f0
					}
					f6elem.NetworkConfiguration = f6elemf6
				}
				if f6iter.PendingCount != nil {
					f6elem.PendingCount = f6iter.PendingCount
				}
				if f6iter.PlatformFamily != nil {
					f6elem.PlatformFamily = f6iter.PlatformFamily
				}
				if f6iter.PlatformVersion != nil {
					f6elem.PlatformVersion = f6iter.PlatformVersion
				}
				if f6iter.RolloutState != nil {
					f6elem.RolloutState = f6iter.RolloutState
				}
				if f6iter.RolloutStateReason != nil {
					f6elem.RolloutStateReason = f6iter.RolloutStateReason
				}
				if f6iter.RunningCount != nil {
					f6elem.RunningCount = f6iter.RunningCount
				}
				if f6iter.ServiceConnectConfiguration != nil {
					f6elemf13 := &svcapitypes.ServiceConnectConfiguration{}
					if f6iter.ServiceConnectConfiguration.Enabled != nil {
						f6elemf13.Enabled = f6iter.ServiceConnectConfiguration.Enabled
					}
					if f6iter.ServiceConnectConfiguration.LogConfiguration != nil {
						f6elemf13f1 := &svcapitypes.LogConfiguration{}
						if f6iter.ServiceConnectConfiguration.LogConfiguration.LogDriver != nil {
							f6elemf13f1.LogDriver = f6iter.ServiceConnectConfiguration.LogConfiguration.LogDriver
						}
						if f6iter.ServiceConnectConfiguration.LogConfiguration.Options != nil {
							f6elemf13f1f1 := map[string]*string{}
							for f6elemf13f1f1key, f6elemf13f1f1valiter := range f6iter.ServiceConnectConfiguration.LogConfiguration.Options {
								var f6elemf13f1f1val string
								f6elemf13f1f1val = *f6elemf13f1f1valiter
								f6elemf13f1f1[f6elemf13f1f1key] = &f6elemf13f1f1val
							}
							f6elemf13f1.Options = f6elemf13f1f1
						}
						if f6iter.ServiceConnectConfiguration.LogConfiguration.SecretOptions != nil {
							f6elemf13f1f2 := []*svcapitypes.Secret{}
							for _, f6elemf13f1f2iter := range f6iter.ServiceConnectConfiguration.LogConfiguration.SecretOptions {
								f6elemf13f1f2elem := &svcapitypes.Secret{}
								if f6elemf13f1f2iter.Name != nil {
									f6elemf13f1f2elem.Name = f6elemf13f1f2iter.Name
								}
								if f6elemf13f1f2iter.ValueFrom != nil {
									f6elemf13f1f2elem.ValueFrom = f6elemf13f1f2iter.ValueFrom
								}
								f6elemf13f1f2 = append(f6elemf13f1f2, f6elemf13f1f2elem)
							}
							f6elemf13f1.SecretOptions = f6elemf13f1f2
						}
						f6elemf13.LogConfiguration = f6elemf13f1
					}
					if f6iter.ServiceConnectConfiguration.Namespace != nil {
						f6elemf13.Namespace = f6iter.ServiceConnectConfiguration.Namespace
					}
					if f6iter.ServiceConnectConfiguration.Services != nil {
						f6elemf13f3 := []*svcapitypes.ServiceConnectService{}
						for _, f6elemf13f3iter := range f6iter.ServiceConnectConfiguration.Services {
							f6elemf13f3elem := &svcapitypes.ServiceConnectService{}
							if f6elemf13f3iter.ClientAliases != nil {
								f6elemf13f3elemf0 := []*svcapitypes.ServiceConnectClientAlias{}
								for _, f6elemf13f3elemf0iter := range f6elemf13f3iter.ClientAliases {
									f6elemf13f3elemf0elem := &svcapitypes.ServiceConnectClientAlias{}
									if f6elemf13f3elemf0iter.DnsName != nil {
										f6elemf13f3elemf0elem.DNSName = f6elemf13f3elemf0iter.DnsName
									}
									if f6elemf13f3elemf0iter.Port != nil {
										f6elemf13f3elemf0elem.Port = f6elemf13f3elemf0iter.Port
									}
									f6elemf13f3elemf0 = append(f6elemf13f3elemf0, f6elemf13f3elemf0elem)
								}
								f6elemf13f3elem.ClientAliases = f6elemf13f3elemf0
							}
							if f6elemf13f3iter.DiscoveryName != nil {
								f6elemf13f3elem.DiscoveryName = f6elemf13f3iter.DiscoveryName
							}
							if f6elemf13f3iter.IngressPortOverride != nil {
								f6elemf13f3elem.IngressPortOverride = f6elemf13f3iter.IngressPortOverride
							}
							if f6elemf13f3iter.PortName != nil {
								f6elemf13f3elem.PortName = f6elemf13f3iter.PortName
							}
							if f6elemf13f3iter.Timeout != nil {
								f6elemf13f3elemf4 := &svcapitypes.TimeoutConfiguration{}
								if f6elemf13f3iter.Timeout.IdleTimeoutSeconds != nil {
									f6elemf13f3elemf4.IdleTimeoutSeconds = f6elemf13f3iter.Timeout.IdleTimeoutSeconds
								}
								if f6elemf13f3iter.Timeout.PerRequestTimeoutSeconds != nil {
									f6elemf13f3elemf4.PerRequestTimeoutSeconds = f6elemf13f3iter.Timeout.PerRequestTimeoutSeconds
								}
								f6elemf13f3elem.Timeout = f6elemf13f3elemf4
							}
							if f6elemf13f3iter.Tls != nil {
								f6elemf13f3elemf5 := &svcapitypes.ServiceConnecTTLSConfiguration{}
								if f6elemf13f3iter.Tls.IssuerCertificateAuthority != nil {
									f6elemf13f3elemf5f0 := &svcapitypes.ServiceConnecTTLSCertificateAuthority{}
									if f6elemf13f3iter.Tls.IssuerCertificateAuthority.AwsPcaAuthorityArn != nil {
										f6elemf13f3elemf5f0.AWSPCAAuthorityARN = f6elemf13f3iter.Tls.IssuerCertificateAuthority.AwsPcaAuthorityArn
									}
									f6elemf13f3elemf5.IssuerCertificateAuthority = f6elemf13f3elemf5f0
								}
								if f6elemf13f3iter.Tls.KmsKey != nil {
									f6elemf13f3elemf5.KMSKey = f6elemf13f3iter.Tls.KmsKey
								}
								if f6elemf13f3iter.Tls.RoleArn != nil {
									f6elemf13f3elemf5.RoleARN = f6elemf13f3iter.Tls.RoleArn
								}
								f6elemf13f3elem.TLS = f6elemf13f3elemf5
							}
							f6elemf13f3 = append(f6elemf13f3, f6elemf13f3elem)
						}
						f6elemf13.Services = f6elemf13f3
					}
					f6elem.ServiceConnectConfiguration = f6elemf13
				}
				if f6iter.ServiceConnectResources != nil {
					f6elemf14 := []*svcapitypes.ServiceConnectServiceResource{}
					for _, f6elemf14iter := range f6iter.ServiceConnectResources {
						f6elemf14elem := &svcapitypes.ServiceConnectServiceResource{}
						if f6elemf14iter.DiscoveryArn != nil {
							f6elemf14elem.DiscoveryARN = f6elemf14iter.DiscoveryArn
						}
						if f6elemf14iter.DiscoveryName != nil {
							f6elemf14elem.DiscoveryName = f6elemf14iter.DiscoveryName
						}
						f6elemf14 = append(f6elemf14, f6elemf14elem)
					}
					f6elem.ServiceConnectResources = f6elemf14
				}
				if f6iter.Status != nil {
					f6elem.Status = f6iter.Status
				}
				if f6iter.TaskDefinition != nil {
					f6elem.TaskDefinition = f6iter.TaskDefinition
				}
				if f6iter.UpdatedAt != nil {
					f6elem.UpdatedAt = &metav1.Time{*f6iter.UpdatedAt}
				}
				if f6iter.VolumeConfigurations != nil {
					f6elemf18 := []*svcapitypes.ServiceVolumeConfiguration{}
					for _, f6elemf18iter := range f6iter.VolumeConfigurations {
						f6elemf18elem := &svcapitypes.ServiceVolumeConfiguration{}
						if f6elemf18iter.ManagedEBSVolume != nil {
							f6elemf18elemf0 := &svcapitypes.ServiceManagedEBSVolumeConfiguration{}
							if f6elemf18iter.ManagedEBSVolume.Encrypted != nil {
								f6elemf18elemf0.Encrypted = f6elemf18iter.ManagedEBSVolume.Encrypted
							}
							if f6elemf18iter.ManagedEBSVolume.FilesystemType != nil {
								f6elemf18elemf0.FilesystemType = f6elemf18iter.ManagedEBSVolume.FilesystemType
							}
							if f6elemf18iter.ManagedEBSVolume.Iops != nil {
								f6elemf18elemf0.IOPS = f6elemf18iter.ManagedEBSVolume.Iops
							}
							if f6elemf18iter.ManagedEBSVolume.KmsKeyId != nil {
								f6elemf18elemf0.KMSKeyID = f6elemf18iter.ManagedEBSVolume.KmsKeyId
							}
							if f6elemf18iter.ManagedEBSVolume.RoleArn != nil {
								f6elemf18elemf0.RoleARN = f6elemf18iter.ManagedEBSVolume.RoleArn
							}
							if f6elemf18iter.ManagedEBSVolume.SizeInGiB != nil {
								f6elemf18elemf0.SizeInGiB = f6elemf18iter.ManagedEBSVolume.SizeInGiB
							}
							if f6elemf18iter.ManagedEBSVolume.SnapshotId != nil {
								f6elemf18elemf0.SnapshotID = f6elemf18iter.ManagedEBSVolume.SnapshotId
							}
							if f6elemf18iter.ManagedEBSVolume.TagSpecifications != nil {
								f6elemf18elemf0f7 := []*svcapitypes.EBSTagSpecification{}
								for _, f6elemf18elemf0f7iter := range f6elemf18iter.ManagedEBSVolume.TagSpecifications {
									f6elemf18elemf0f7elem := &svcapitypes.EBSTagSpecification{}
									if f6elemf18elemf0f7iter.PropagateTags != nil {
										f6elemf18elemf0f7elem.PropagateTags = f6elemf18elemf0f7iter.PropagateTags
									}
									if f6elemf18elemf0f7iter.ResourceType != nil {
										f6elemf18elemf0f7elem.ResourceType = f6elemf18elemf0f7iter.ResourceType
									}
									if f6elemf18elemf0f7iter.Tags != nil {
										f6elemf18elemf0f7elemf2 := []*svcapitypes.Tag{}
										for _, f6elemf18elemf0f7elemf2iter := range f6elemf18elemf0f7iter.Tags {
											f6elemf18elemf0f7elemf2elem := &svcapitypes.Tag{}
											if f6elemf18elemf0f7elemf2iter.Key != nil {
												f6elemf18elemf0f7elemf2elem.Key = f6elemf18elemf0f7elemf2iter.Key
											}
											if f6elemf18elemf0f7elemf2iter.Value != nil {
												f6elemf18elemf0f7elemf2elem.Value = f6elemf18elemf0f7elemf2iter.Value
											}
											f6elemf18elemf0f7elemf2 = append(f6elemf18elemf0f7elemf2, f6elemf18elemf0f7elemf2elem)
										}
										f6elemf18elemf0f7elem.Tags = f6elemf18elemf0f7elemf2
									}
									f6elemf18elemf0f7 = append(f6elemf18elemf0f7, f6elemf18elemf0f7elem)
								}
								f6elemf18elemf0.TagSpecifications = f6elemf18elemf0f7
							}
							if f6elemf18iter.ManagedEBSVolume.Throughput != nil {
								f6elemf18elemf0.Throughput = f6elemf18iter.ManagedEBSVolume.Throughput
							}
							if f6elemf18iter.ManagedEBSVolume.VolumeType != nil {
								f6elemf18elemf0.VolumeType = f6elemf18iter.ManagedEBSVolume.VolumeType
							}
							f6elemf18elem.ManagedEBSVolume = f6elemf18elemf0
						}
						if f6elemf18iter.Name != nil {
							f6elemf18elem.Name = f6elemf18iter.Name
						}
						f6elemf18 = append(f6elemf18, f6elemf18elem)
					}
					f6elem.VolumeConfigurations = f6elemf18
				}
				f6 = append(f6, f6elem)
			}
			ko.Status.Deployments = f6
		} else {
			ko.Status.Deployments = nil
		}
		if elem.DesiredCount != nil {
			ko.Spec.DesiredCount = elem.DesiredCount
		} else {
			ko.Spec.DesiredCount = nil
		}
		if elem.EnableECSManagedTags != nil {
			ko.Spec.EnableECSManagedTags = elem.EnableECSManagedTags
		} else {
			ko.Spec.EnableECSManagedTags = nil
		}
		if elem.EnableExecuteCommand != nil {
			ko.Spec.EnableExecuteCommand = elem.EnableExecuteCommand
		} else {
			ko.Spec.EnableExecuteCommand = nil
		}
		if elem.Events != nil {
			f10 := []*svcapitypes.ServiceEvent{}
			for _, f10iter := range elem.Events {
				f10elem := &svcapitypes.ServiceEvent{}
				if f10iter.CreatedAt != nil {
					f10elem.CreatedAt = &metav1.Time{*f10iter.CreatedAt}
				}
				if f10iter.Id != nil {
					f10elem.ID = f10iter.Id
				}
				if f10iter.Message != nil {
					f10elem.Message = f10iter.Message
				}
				f10 = append(f10, f10elem)
			}
			ko.Status.Events = f10
		} else {
			ko.Status.Events = nil
		}
		if elem.HealthCheckGracePeriodSeconds != nil {
			ko.Spec.HealthCheckGracePeriodSeconds = elem.HealthCheckGracePeriodSeconds
		} else {
			ko.Spec.HealthCheckGracePeriodSeconds = nil
		}
		if elem.LaunchType != nil {
			ko.Spec.LaunchType = elem.LaunchType
		} else {
			ko.Spec.LaunchType = nil
		}
		if elem.LoadBalancers != nil {
			f13 := []*svcapitypes.LoadBalancer{}
			for _, f13iter := range elem.LoadBalancers {
				f13elem := &svcapitypes.LoadBalancer{}
				if f13iter.ContainerName != nil {
					f13elem.ContainerName = f13iter.ContainerName
				}
				if f13iter.ContainerPort != nil {
					f13elem.ContainerPort = f13iter.ContainerPort
				}
				if f13iter.LoadBalancerName != nil {
					f13elem.LoadBalancerName = f13iter.LoadBalancerName
				}
				if f13iter.TargetGroupArn != nil {
					f13elem.TargetGroupARN = f13iter.TargetGroupArn
				}
				f13 = append(f13, f13elem)
			}
			ko.Spec.LoadBalancers = f13
		} else {
			ko.Spec.LoadBalancers = nil
		}
		if elem.NetworkConfiguration != nil {
			f14 := &svcapitypes.NetworkConfiguration{}
			if elem.NetworkConfiguration.AwsvpcConfiguration != nil {
				f14f0 := &svcapitypes.AWSVPCConfiguration{}
				if elem.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != nil {
					f14f0.AssignPublicIP = elem.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp
				}
				if elem.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
					f14f0f1 := []*string{}
					for _, f14f0f1iter := range elem.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups {
						var f14f0f1elem string
						f14f0f1elem = *f14f0f1iter
						f14f0f1 = append(f14f0f1, &f14f0f1elem)
					}
					f14f0.SecurityGroups = f14f0f1
				}
				if elem.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
					f14f0f2 := []*string{}
					for _, f14f0f2iter := range elem.NetworkConfiguration.AwsvpcConfiguration.Subnets {
						var f14f0f2elem string
						f14f0f2elem = *f14f0f2iter
						f14f0f2 = append(f14f0f2, &f14f0f2elem)
					}
					f14f0.Subnets = f14f0f2
				}
				f14.AWSVPCConfiguration = f14f0
			}
			ko.Spec.NetworkConfiguration = f14
		} else {
			ko.Spec.NetworkConfiguration = nil
		}
		if elem.PendingCount != nil {
			ko.Status.PendingCount = elem.PendingCount
		} else {
			ko.Status.PendingCount = nil
		}
		if elem.PlacementConstraints != nil {
			f16 := []*svcapitypes.PlacementConstraint{}
			for _, f16iter := range elem.PlacementConstraints {
				f16elem := &svcapitypes.PlacementConstraint{}
				if f16iter.Expression != nil {
					f16elem.Expression = f16iter.Expression
				}
				if f16iter.Type != nil {
					f16elem.Type = f16iter.Type
				}
				f16 = append(f16, f16elem)
			}
			ko.Spec.PlacementConstraints = f16
		} else {
			ko.Spec.PlacementConstraints = nil
		}
		if elem.PlacementStrategy != nil {
			f17 := []*svcapitypes.PlacementStrategy{}
			for _, f17iter := range elem.PlacementStrategy {
				f17elem := &svcapitypes.PlacementStrategy{}
				if f17iter.Field != nil {
					f17elem.Field = f17iter.Field
				}
				if f17iter.Type != nil {
					f17elem.Type = f17iter.Type
				}
				f17 = append(f17, f17elem)
			}
			ko.Spec.PlacementStrategy = f17
		} else {
			ko.Spec.PlacementStrategy = nil
		}
		if elem.PlatformFamily != nil {
			ko.Status.PlatformFamily = elem.PlatformFamily
		} else {
			ko.Status.PlatformFamily = nil
		}
		if elem.PlatformVersion != nil {
			ko.Spec.PlatformVersion = elem.PlatformVersion
		} else {
			ko.Spec.PlatformVersion = nil
		}
		if elem.PropagateTags != nil {
			ko.Spec.PropagateTags = elem.PropagateTags
		} else {
			ko.Spec.PropagateTags = nil
		}
		if elem.RoleArn != nil {
			ko.Status.RoleARN = elem.RoleArn
		} else {
			ko.Status.RoleARN = nil
		}
		if elem.RunningCount != nil {
			ko.Status.RunningCount = elem.RunningCount
		} else {
			ko.Status.RunningCount = nil
		}
		if elem.SchedulingStrategy != nil {
			ko.Spec.SchedulingStrategy = elem.SchedulingStrategy
		} else {
			ko.Spec.SchedulingStrategy = nil
		}
		if elem.ServiceArn != nil {
			if ko.Status.ACKResourceMetadata == nil {
				ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
			}
			tmpARN := ackv1alpha1.AWSResourceName(*elem.ServiceArn)
			ko.Status.ACKResourceMetadata.ARN = &tmpARN
		}
		if elem.ServiceName != nil {
			if ko.Spec.Name != nil {
				if *elem.ServiceName != *ko.Spec.Name {
					continue
				}
			}
			ko.Spec.Name = elem.ServiceName
		} else {
			ko.Spec.Name = nil
		}
		if elem.ServiceRegistries != nil {
			f26 := []*svcapitypes.ServiceRegistry{}
			for _, f26iter := range elem.ServiceRegistries {
				f26elem := &svcapitypes.ServiceRegistry{}
				if f26iter.ContainerName != nil {
					f26elem.ContainerName = f26iter.ContainerName
				}
				if f26iter.ContainerPort != nil {
					f26elem.ContainerPort = f26iter.ContainerPort
				}
				if f26iter.Port != nil {
					f26elem.Port = f26iter.Port
				}
				if f26iter.RegistryArn != nil {
					f26elem.RegistryARN = f26iter.RegistryArn
				}
				f26 = append(f26, f26elem)
			}
			ko.Spec.ServiceRegistries = f26
		} else {
			ko.Spec.ServiceRegistries = nil
		}
		if elem.Status != nil {
			ko.Status.Status = elem.Status
		} else {
			ko.Status.Status = nil
		}
		if elem.Tags != nil {
			f28 := []*svcapitypes.Tag{}
			for _, f28iter := range elem.Tags {
				f28elem := &svcapitypes.Tag{}
				if f28iter.Key != nil {
					f28elem.Key = f28iter.Key
				}
				if f28iter.Value != nil {
					f28elem.Value = f28iter.Value
				}
				f28 = append(f28, f28elem)
			}
			ko.Spec.Tags = f28
		} else {
			ko.Spec.Tags = nil
		}
		if elem.TaskDefinition != nil {
			ko.Spec.TaskDefinition = elem.TaskDefinition
		} else {
			ko.Spec.TaskDefinition = nil
		}
		if elem.TaskSets != nil {
			f30 := []*svcapitypes.TaskSet{}
			for _, f30iter := range elem.TaskSets {
				f30elem := &svcapitypes.TaskSet{}
				if f30iter.CapacityProviderStrategy != nil {
					f30elemf0 := []*svcapitypes.CapacityProviderStrategyItem{}
					for _, f30elemf0iter := range f30iter.CapacityProviderStrategy {
						f30elemf0elem := &svcapitypes.CapacityProviderStrategyItem{}
						if f30elemf0iter.Base != nil {
							f30elemf0elem.Base = f30elemf0iter.Base
						}
						if f30elemf0iter.CapacityProvider != nil {
							f30elemf0elem.CapacityProvider = f30elemf0iter.CapacityProvider
						}
						if f30elemf0iter.Weight != nil {
							f30elemf0elem.Weight = f30elemf0iter.Weight
						}
						f30elemf0 = append(f30elemf0, f30elemf0elem)
					}
					f30elem.CapacityProviderStrategy = f30elemf0
				}
				if f30iter.ClusterArn != nil {
					f30elem.ClusterARN = f30iter.ClusterArn
				}
				if f30iter.ComputedDesiredCount != nil {
					f30elem.ComputedDesiredCount = f30iter.ComputedDesiredCount
				}
				if f30iter.CreatedAt != nil {
					f30elem.CreatedAt = &metav1.Time{*f30iter.CreatedAt}
				}
				if f30iter.ExternalId != nil {
					f30elem.ExternalID = f30iter.ExternalId
				}
				if f30iter.Id != nil {
					f30elem.ID = f30iter.Id
				}
				if f30iter.LaunchType != nil {
					f30elem.LaunchType = f30iter.LaunchType
				}
				if f30iter.LoadBalancers != nil {
					f30elemf7 := []*svcapitypes.LoadBalancer{}
					for _, f30elemf7iter := range f30iter.LoadBalancers {
						f30elemf7elem := &svcapitypes.LoadBalancer{}
						if f30elemf7iter.ContainerName != nil {
							f30elemf7elem.ContainerName = f30elemf7iter.ContainerName
						}
						if f30elemf7iter.ContainerPort != nil {
							f30elemf7elem.ContainerPort = f30elemf7iter.ContainerPort
						}
						if f30elemf7iter.LoadBalancerName != nil {
							f30elemf7elem.LoadBalancerName = f30elemf7iter.LoadBalancerName
						}
						if f30elemf7iter.TargetGroupArn != nil {
							f30elemf7elem.TargetGroupARN = f30elemf7iter.TargetGroupArn
						}
						f30elemf7 = append(f30elemf7, f30elemf7elem)
					}
					f30elem.LoadBalancers = f30elemf7
				}
				if f30iter.NetworkConfiguration != nil {
					f30elemf8 := &svcapitypes.NetworkConfiguration{}
					if f30iter.NetworkConfiguration.AwsvpcConfiguration != nil {
						f30elemf8f0 := &svcapitypes.AWSVPCConfiguration{}
						if f30iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != nil {
							f30elemf8f0.AssignPublicIP = f30iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp
						}
						if f30iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
							f30elemf8f0f1 := []*string{}
							for _, f30elemf8f0f1iter := range f30iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups {
								var f30elemf8f0f1elem string
								f30elemf8f0f1elem = *f30elemf8f0f1iter
								f30elemf8f0f1 = append(f30elemf8f0f1, &f30elemf8f0f1elem)
							}
							f30elemf8f0.SecurityGroups = f30elemf8f0f1
						}
						if f30iter.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
							f30elemf8f0f2 := []*string{}
							for _, f30elemf8f0f2iter := range f30iter.NetworkConfiguration.AwsvpcConfiguration.Subnets {
								var f30elemf8f0f2elem string
								f30elemf8f0f2elem = *f30elemf8f0f2iter
								f30elemf8f0f2 = append(f30elemf8f0f2, &f30elemf8f0f2elem)
							}
							f30elemf8f0.Subnets = f30elemf8f0f2
						}
						f30elemf8.AWSVPCConfiguration = f30elemf8f0
					}
					f30elem.NetworkConfiguration = f30elemf8
				}
				if f30iter.PendingCount != nil {
					f30elem.PendingCount = f30iter.PendingCount
				}
				if f30iter.PlatformFamily != nil {
					f30elem.PlatformFamily = f30iter.PlatformFamily
				}
				if f30iter.PlatformVersion != nil {
					f30elem.PlatformVersion = f30iter.PlatformVersion
				}
				if f30iter.RunningCount != nil {
					f30elem.RunningCount = f30iter.RunningCount
				}
				if f30iter.Scale != nil {
					f30elemf13 := &svcapitypes.Scale{}
					if f30iter.Scale.Unit != nil {
						f30elemf13.Unit = f30iter.Scale.Unit
					}
					if f30iter.Scale.Value != nil {
						f30elemf13.Value = f30iter.Scale.Value
					}
					f30elem.Scale = f30elemf13
				}
				if f30iter.ServiceArn != nil {
					f30elem.ServiceARN = f30iter.ServiceArn
				}
				if f30iter.ServiceRegistries != nil {
					f30elemf15 := []*svcapitypes.ServiceRegistry{}
					for _, f30elemf15iter := range f30iter.ServiceRegistries {
						f30elemf15elem := &svcapitypes.ServiceRegistry{}
						if f30elemf15iter.ContainerName != nil {
							f30elemf15elem.ContainerName = f30elemf15iter.ContainerName
						}
						if f30elemf15iter.ContainerPort != nil {
							f30elemf15elem.ContainerPort = f30elemf15iter.ContainerPort
						}
						if f30elemf15iter.Port != nil {
							f30elemf15elem.Port = f30elemf15iter.Port
						}
						if f30elemf15iter.RegistryArn != nil {
							f30elemf15elem.RegistryARN = f30elemf15iter.RegistryArn
						}
						f30elemf15 = append(f30elemf15, f30elemf15elem)
					}
					f30elem.ServiceRegistries = f30elemf15
				}
				if f30iter.StabilityStatus != nil {
					f30elem.StabilityStatus = f30iter.StabilityStatus
				}
				if f30iter.StabilityStatusAt != nil {
					f30elem.StabilityStatusAt = &metav1.Time{*f30iter.StabilityStatusAt}
				}
				if f30iter.StartedBy != nil {
					f30elem.StartedBy = f30iter.StartedBy
				}
				if f30iter.Status != nil {
					f30elem.Status = f30iter.Status
				}
				if f30iter.Tags != nil {
					f30elemf20 := []*svcapitypes.Tag{}
					for _, f30elemf20iter := range f30iter.Tags {
						f30elemf20elem := &svcapitypes.Tag{}
						if f30elemf20iter.Key != nil {
							f30elemf20elem.Key = f30elemf20iter.Key
						}
						if f30elemf20iter.Value != nil {
							f30elemf20elem.Value = f30elemf20iter.Value
						}
						f30elemf20 = append(f30elemf20, f30elemf20elem)
					}
					f30elem.Tags = f30elemf20
				}
				if f30iter.TaskDefinition != nil {
					f30elem.TaskDefinition = f30iter.TaskDefinition
				}
				if f30iter.TaskSetArn != nil {
					f30elem.TaskSetARN = f30iter.TaskSetArn
				}
				if f30iter.UpdatedAt != nil {
					f30elem.UpdatedAt = &metav1.Time{*f30iter.UpdatedAt}
				}
				f30 = append(f30, f30elem)
			}
			ko.Status.TaskSets = f30
		} else {
			ko.Status.TaskSets = nil
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return false
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeServicesInput, error) {
	res := &svcsdk.DescribeServicesInput{}

	if r.ko.Spec.Cluster != nil {
		res.SetCluster(*r.ko.Spec.Cluster)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateServiceOutput
	_ = resp
	resp, err = rm.sdkapi.CreateServiceWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateService", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.Service.CapacityProviderStrategy != nil {
		f0 := []*svcapitypes.CapacityProviderStrategyItem{}
		for _, f0iter := range resp.Service.CapacityProviderStrategy {
			f0elem := &svcapitypes.CapacityProviderStrategyItem{}
			if f0iter.Base != nil {
				f0elem.Base = f0iter.Base
			}
			if f0iter.CapacityProvider != nil {
				f0elem.CapacityProvider = f0iter.CapacityProvider
			}
			if f0iter.Weight != nil {
				f0elem.Weight = f0iter.Weight
			}
			f0 = append(f0, f0elem)
		}
		ko.Spec.CapacityProviderStrategy = f0
	} else {
		ko.Spec.CapacityProviderStrategy = nil
	}
	if resp.Service.ClusterArn != nil {
		ko.Status.ClusterARN = resp.Service.ClusterArn
	} else {
		ko.Status.ClusterARN = nil
	}
	if resp.Service.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.Service.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.Service.CreatedBy != nil {
		ko.Status.CreatedBy = resp.Service.CreatedBy
	} else {
		ko.Status.CreatedBy = nil
	}
	if resp.Service.DeploymentConfiguration != nil {
		f4 := &svcapitypes.DeploymentConfiguration{}
		if resp.Service.DeploymentConfiguration.Alarms != nil {
			f4f0 := &svcapitypes.DeploymentAlarms{}
			if resp.Service.DeploymentConfiguration.Alarms.AlarmNames != nil {
				f4f0f0 := []*string{}
				for _, f4f0f0iter := range resp.Service.DeploymentConfiguration.Alarms.AlarmNames {
					var f4f0f0elem string
					f4f0f0elem = *f4f0f0iter
					f4f0f0 = append(f4f0f0, &f4f0f0elem)
				}
				f4f0.AlarmNames = f4f0f0
			}
			if resp.Service.DeploymentConfiguration.Alarms.Enable != nil {
				f4f0.Enable = resp.Service.DeploymentConfiguration.Alarms.Enable
			}
			if resp.Service.DeploymentConfiguration.Alarms.Rollback != nil {
				f4f0.Rollback = resp.Service.DeploymentConfiguration.Alarms.Rollback
			}
			f4.Alarms = f4f0
		}
		if resp.Service.DeploymentConfiguration.DeploymentCircuitBreaker != nil {
			f4f1 := &svcapitypes.DeploymentCircuitBreaker{}
			if resp.Service.DeploymentConfiguration.DeploymentCircuitBreaker.Enable != nil {
				f4f1.Enable = resp.Service.DeploymentConfiguration.DeploymentCircuitBreaker.Enable
			}
			if resp.Service.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback != nil {
				f4f1.Rollback = resp.Service.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback
			}
			f4.DeploymentCircuitBreaker = f4f1
		}
		if resp.Service.DeploymentConfiguration.MaximumPercent != nil {
			f4.MaximumPercent = resp.Service.DeploymentConfiguration.MaximumPercent
		}
		if resp.Service.DeploymentConfiguration.MinimumHealthyPercent != nil {
			f4.MinimumHealthyPercent = resp.Service.DeploymentConfiguration.MinimumHealthyPercent
		}
		ko.Spec.DeploymentConfiguration = f4
	} else {
		ko.Spec.DeploymentConfiguration = nil
	}
	if resp.Service.DeploymentController != nil {
		f5 := &svcapitypes.DeploymentController{}
		if resp.Service.DeploymentController.Type != nil {
			f5.Type = resp.Service.DeploymentController.Type
		}
		ko.Spec.DeploymentController = f5
	} else {
		ko.Spec.DeploymentController = nil
	}
	if resp.Service.Deployments != nil {
		f6 := []*svcapitypes.Deployment{}
		for _, f6iter := range resp.Service.Deployments {
			f6elem := &svcapitypes.Deployment{}
			if f6iter.CapacityProviderStrategy != nil {
				f6elemf0 := []*svcapitypes.CapacityProviderStrategyItem{}
				for _, f6elemf0iter := range f6iter.CapacityProviderStrategy {
					f6elemf0elem := &svcapitypes.CapacityProviderStrategyItem{}
					if f6elemf0iter.Base != nil {
						f6elemf0elem.Base = f6elemf0iter.Base
					}
					if f6elemf0iter.CapacityProvider != nil {
						f6elemf0elem.CapacityProvider = f6elemf0iter.CapacityProvider
					}
					if f6elemf0iter.Weight != nil {
						f6elemf0elem.Weight = f6elemf0iter.Weight
					}
					f6elemf0 = append(f6elemf0, f6elemf0elem)
				}
				f6elem.CapacityProviderStrategy = f6elemf0
			}
			if f6iter.CreatedAt != nil {
				f6elem.CreatedAt = &metav1.Time{*f6iter.CreatedAt}
			}
			if f6iter.DesiredCount != nil {
				f6elem.DesiredCount = f6iter.DesiredCount
			}
			if f6iter.FailedTasks != nil {
				f6elem.FailedTasks = f6iter.FailedTasks
			}
			if f6iter.Id != nil {
				f6elem.ID = f6iter.Id
			}
			if f6iter.LaunchType != nil {
				f6elem.LaunchType = f6iter.LaunchType
			}
			if f6iter.NetworkConfiguration != nil {
				f6elemf6 := &svcapitypes.NetworkConfiguration{}
				if f6iter.NetworkConfiguration.AwsvpcConfiguration != nil {
					f6elemf6f0 := &svcapitypes.AWSVPCConfiguration{}
					if f6iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != nil {
						f6elemf6f0.AssignPublicIP = f6iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp
					}
					if f6iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
						f6elemf6f0f1 := []*string{}
						for _, f6elemf6f0f1iter := range f6iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups {
							var f6elemf6f0f1elem string
							f6elemf6f0f1elem = *f6elemf6f0f1iter
							f6elemf6f0f1 = append(f6elemf6f0f1, &f6elemf6f0f1elem)
						}
						f6elemf6f0.SecurityGroups = f6elemf6f0f1
					}
					if f6iter.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
						f6elemf6f0f2 := []*string{}
						for _, f6elemf6f0f2iter := range f6iter.NetworkConfiguration.AwsvpcConfiguration.Subnets {
							var f6elemf6f0f2elem string
							f6elemf6f0f2elem = *f6elemf6f0f2iter
							f6elemf6f0f2 = append(f6elemf6f0f2, &f6elemf6f0f2elem)
						}
						f6elemf6f0.Subnets = f6elemf6f0f2
					}
					f6elemf6.AWSVPCConfiguration = f6elemf6f0
				}
				f6elem.NetworkConfiguration = f6elemf6
			}
			if f6iter.PendingCount != nil {
				f6elem.PendingCount = f6iter.PendingCount
			}
			if f6iter.PlatformFamily != nil {
				f6elem.PlatformFamily = f6iter.PlatformFamily
			}
			if f6iter.PlatformVersion != nil {
				f6elem.PlatformVersion = f6iter.PlatformVersion
			}
			if f6iter.RolloutState != nil {
				f6elem.RolloutState = f6iter.RolloutState
			}
			if f6iter.RolloutStateReason != nil {
				f6elem.RolloutStateReason = f6iter.RolloutStateReason
			}
			if f6iter.RunningCount != nil {
				f6elem.RunningCount = f6iter.RunningCount
			}
			if f6iter.ServiceConnectConfiguration != nil {
				f6elemf13 := &svcapitypes.ServiceConnectConfiguration{}
				if f6iter.ServiceConnectConfiguration.Enabled != nil {
					f6elemf13.Enabled = f6iter.ServiceConnectConfiguration.Enabled
				}
				if f6iter.ServiceConnectConfiguration.LogConfiguration != nil {
					f6elemf13f1 := &svcapitypes.LogConfiguration{}
					if f6iter.ServiceConnectConfiguration.LogConfiguration.LogDriver != nil {
						f6elemf13f1.LogDriver = f6iter.ServiceConnectConfiguration.LogConfiguration.LogDriver
					}
					if f6iter.ServiceConnectConfiguration.LogConfiguration.Options != nil {
						f6elemf13f1f1 := map[string]*string{}
						for f6elemf13f1f1key, f6elemf13f1f1valiter := range f6iter.ServiceConnectConfiguration.LogConfiguration.Options {
							var f6elemf13f1f1val string
							f6elemf13f1f1val = *f6elemf13f1f1valiter
							f6elemf13f1f1[f6elemf13f1f1key] = &f6elemf13f1f1val
						}
						f6elemf13f1.Options = f6elemf13f1f1
					}
					if f6iter.ServiceConnectConfiguration.LogConfiguration.SecretOptions != nil {
						f6elemf13f1f2 := []*svcapitypes.Secret{}
						for _, f6elemf13f1f2iter := range f6iter.ServiceConnectConfiguration.LogConfiguration.SecretOptions {
							f6elemf13f1f2elem := &svcapitypes.Secret{}
							if f6elemf13f1f2iter.Name != nil {
								f6elemf13f1f2elem.Name = f6elemf13f1f2iter.Name
							}
							if f6elemf13f1f2iter.ValueFrom != nil {
								f6elemf13f1f2elem.ValueFrom = f6elemf13f1f2iter.ValueFrom
							}
							f6elemf13f1f2 = append(f6elemf13f1f2, f6elemf13f1f2elem)
						}
						f6elemf13f1.SecretOptions = f6elemf13f1f2
					}
					f6elemf13.LogConfiguration = f6elemf13f1
				}
				if f6iter.ServiceConnectConfiguration.Namespace != nil {
					f6elemf13.Namespace = f6iter.ServiceConnectConfiguration.Namespace
				}
				if f6iter.ServiceConnectConfiguration.Services != nil {
					f6elemf13f3 := []*svcapitypes.ServiceConnectService{}
					for _, f6elemf13f3iter := range f6iter.ServiceConnectConfiguration.Services {
						f6elemf13f3elem := &svcapitypes.ServiceConnectService{}
						if f6elemf13f3iter.ClientAliases != nil {
							f6elemf13f3elemf0 := []*svcapitypes.ServiceConnectClientAlias{}
							for _, f6elemf13f3elemf0iter := range f6elemf13f3iter.ClientAliases {
								f6elemf13f3elemf0elem := &svcapitypes.ServiceConnectClientAlias{}
								if f6elemf13f3elemf0iter.DnsName != nil {
									f6elemf13f3elemf0elem.DNSName = f6elemf13f3elemf0iter.DnsName
								}
								if f6elemf13f3elemf0iter.Port != nil {
									f6elemf13f3elemf0elem.Port = f6elemf13f3elemf0iter.Port
								}
								f6elemf13f3elemf0 = append(f6elemf13f3elemf0, f6elemf13f3elemf0elem)
							}
							f6elemf13f3elem.ClientAliases = f6elemf13f3elemf0
						}
						if f6elemf13f3iter.DiscoveryName != nil {
							f6elemf13f3elem.DiscoveryName = f6elemf13f3iter.DiscoveryName
						}
						if f6elemf13f3iter.IngressPortOverride != nil {
							f6elemf13f3elem.IngressPortOverride = f6elemf13f3iter.IngressPortOverride
						}
						if f6elemf13f3iter.PortName != nil {
							f6elemf13f3elem.PortName = f6elemf13f3iter.PortName
						}
						if f6elemf13f3iter.Timeout != nil {
							f6elemf13f3elemf4 := &svcapitypes.TimeoutConfiguration{}
							if f6elemf13f3iter.Timeout.IdleTimeoutSeconds != nil {
								f6elemf13f3elemf4.IdleTimeoutSeconds = f6elemf13f3iter.Timeout.IdleTimeoutSeconds
							}
							if f6elemf13f3iter.Timeout.PerRequestTimeoutSeconds != nil {
								f6elemf13f3elemf4.PerRequestTimeoutSeconds = f6elemf13f3iter.Timeout.PerRequestTimeoutSeconds
							}
							f6elemf13f3elem.Timeout = f6elemf13f3elemf4
						}
						if f6elemf13f3iter.Tls != nil {
							f6elemf13f3elemf5 := &svcapitypes.ServiceConnecTTLSConfiguration{}
							if f6elemf13f3iter.Tls.IssuerCertificateAuthority != nil {
								f6elemf13f3elemf5f0 := &svcapitypes.ServiceConnecTTLSCertificateAuthority{}
								if f6elemf13f3iter.Tls.IssuerCertificateAuthority.AwsPcaAuthorityArn != nil {
									f6elemf13f3elemf5f0.AWSPCAAuthorityARN = f6elemf13f3iter.Tls.IssuerCertificateAuthority.AwsPcaAuthorityArn
								}
								f6elemf13f3elemf5.IssuerCertificateAuthority = f6elemf13f3elemf5f0
							}
							if f6elemf13f3iter.Tls.KmsKey != nil {
								f6elemf13f3elemf5.KMSKey = f6elemf13f3iter.Tls.KmsKey
							}
							if f6elemf13f3iter.Tls.RoleArn != nil {
								f6elemf13f3elemf5.RoleARN = f6elemf13f3iter.Tls.RoleArn
							}
							f6elemf13f3elem.TLS = f6elemf13f3elemf5
						}
						f6elemf13f3 = append(f6elemf13f3, f6elemf13f3elem)
					}
					f6elemf13.Services = f6elemf13f3
				}
				f6elem.ServiceConnectConfiguration = f6elemf13
			}
			if f6iter.ServiceConnectResources != nil {
				f6elemf14 := []*svcapitypes.ServiceConnectServiceResource{}
				for _, f6elemf14iter := range f6iter.ServiceConnectResources {
					f6elemf14elem := &svcapitypes.ServiceConnectServiceResource{}
					if f6elemf14iter.DiscoveryArn != nil {
						f6elemf14elem.DiscoveryARN = f6elemf14iter.DiscoveryArn
					}
					if f6elemf14iter.DiscoveryName != nil {
						f6elemf14elem.DiscoveryName = f6elemf14iter.DiscoveryName
					}
					f6elemf14 = append(f6elemf14, f6elemf14elem)
				}
				f6elem.ServiceConnectResources = f6elemf14
			}
			if f6iter.Status != nil {
				f6elem.Status = f6iter.Status
			}
			if f6iter.TaskDefinition != nil {
				f6elem.TaskDefinition = f6iter.TaskDefinition
			}
			if f6iter.UpdatedAt != nil {
				f6elem.UpdatedAt = &metav1.Time{*f6iter.UpdatedAt}
			}
			if f6iter.VolumeConfigurations != nil {
				f6elemf18 := []*svcapitypes.ServiceVolumeConfiguration{}
				for _, f6elemf18iter := range f6iter.VolumeConfigurations {
					f6elemf18elem := &svcapitypes.ServiceVolumeConfiguration{}
					if f6elemf18iter.ManagedEBSVolume != nil {
						f6elemf18elemf0 := &svcapitypes.ServiceManagedEBSVolumeConfiguration{}
						if f6elemf18iter.ManagedEBSVolume.Encrypted != nil {
							f6elemf18elemf0.Encrypted = f6elemf18iter.ManagedEBSVolume.Encrypted
						}
						if f6elemf18iter.ManagedEBSVolume.FilesystemType != nil {
							f6elemf18elemf0.FilesystemType = f6elemf18iter.ManagedEBSVolume.FilesystemType
						}
						if f6elemf18iter.ManagedEBSVolume.Iops != nil {
							f6elemf18elemf0.IOPS = f6elemf18iter.ManagedEBSVolume.Iops
						}
						if f6elemf18iter.ManagedEBSVolume.KmsKeyId != nil {
							f6elemf18elemf0.KMSKeyID = f6elemf18iter.ManagedEBSVolume.KmsKeyId
						}
						if f6elemf18iter.ManagedEBSVolume.RoleArn != nil {
							f6elemf18elemf0.RoleARN = f6elemf18iter.ManagedEBSVolume.RoleArn
						}
						if f6elemf18iter.ManagedEBSVolume.SizeInGiB != nil {
							f6elemf18elemf0.SizeInGiB = f6elemf18iter.ManagedEBSVolume.SizeInGiB
						}
						if f6elemf18iter.ManagedEBSVolume.SnapshotId != nil {
							f6elemf18elemf0.SnapshotID = f6elemf18iter.ManagedEBSVolume.SnapshotId
						}
						if f6elemf18iter.ManagedEBSVolume.TagSpecifications != nil {
							f6elemf18elemf0f7 := []*svcapitypes.EBSTagSpecification{}
							for _, f6elemf18elemf0f7iter := range f6elemf18iter.ManagedEBSVolume.TagSpecifications {
								f6elemf18elemf0f7elem := &svcapitypes.EBSTagSpecification{}
								if f6elemf18elemf0f7iter.PropagateTags != nil {
									f6elemf18elemf0f7elem.PropagateTags = f6elemf18elemf0f7iter.PropagateTags
								}
								if f6elemf18elemf0f7iter.ResourceType != nil {
									f6elemf18elemf0f7elem.ResourceType = f6elemf18elemf0f7iter.ResourceType
								}
								if f6elemf18elemf0f7iter.Tags != nil {
									f6elemf18elemf0f7elemf2 := []*svcapitypes.Tag{}
									for _, f6elemf18elemf0f7elemf2iter := range f6elemf18elemf0f7iter.Tags {
										f6elemf18elemf0f7elemf2elem := &svcapitypes.Tag{}
										if f6elemf18elemf0f7elemf2iter.Key != nil {
											f6elemf18elemf0f7elemf2elem.Key = f6elemf18elemf0f7elemf2iter.Key
										}
										if f6elemf18elemf0f7elemf2iter.Value != nil {
											f6elemf18elemf0f7elemf2elem.Value = f6elemf18elemf0f7elemf2iter.Value
										}
										f6elemf18elemf0f7elemf2 = append(f6elemf18elemf0f7elemf2, f6elemf18elemf0f7elemf2elem)
									}
									f6elemf18elemf0f7elem.Tags = f6elemf18elemf0f7elemf2
								}
								f6elemf18elemf0f7 = append(f6elemf18elemf0f7, f6elemf18elemf0f7elem)
							}
							f6elemf18elemf0.TagSpecifications = f6elemf18elemf0f7
						}
						if f6elemf18iter.ManagedEBSVolume.Throughput != nil {
							f6elemf18elemf0.Throughput = f6elemf18iter.ManagedEBSVolume.Throughput
						}
						if f6elemf18iter.ManagedEBSVolume.VolumeType != nil {
							f6elemf18elemf0.VolumeType = f6elemf18iter.ManagedEBSVolume.VolumeType
						}
						f6elemf18elem.ManagedEBSVolume = f6elemf18elemf0
					}
					if f6elemf18iter.Name != nil {
						f6elemf18elem.Name = f6elemf18iter.Name
					}
					f6elemf18 = append(f6elemf18, f6elemf18elem)
				}
				f6elem.VolumeConfigurations = f6elemf18
			}
			f6 = append(f6, f6elem)
		}
		ko.Status.Deployments = f6
	} else {
		ko.Status.Deployments = nil
	}
	if resp.Service.DesiredCount != nil {
		ko.Spec.DesiredCount = resp.Service.DesiredCount
	} else {
		ko.Spec.DesiredCount = nil
	}
	if resp.Service.EnableECSManagedTags != nil {
		ko.Spec.EnableECSManagedTags = resp.Service.EnableECSManagedTags
	} else {
		ko.Spec.EnableECSManagedTags = nil
	}
	if resp.Service.EnableExecuteCommand != nil {
		ko.Spec.EnableExecuteCommand = resp.Service.EnableExecuteCommand
	} else {
		ko.Spec.EnableExecuteCommand = nil
	}
	if resp.Service.Events != nil {
		f10 := []*svcapitypes.ServiceEvent{}
		for _, f10iter := range resp.Service.Events {
			f10elem := &svcapitypes.ServiceEvent{}
			if f10iter.CreatedAt != nil {
				f10elem.CreatedAt = &metav1.Time{*f10iter.CreatedAt}
			}
			if f10iter.Id != nil {
				f10elem.ID = f10iter.Id
			}
			if f10iter.Message != nil {
				f10elem.Message = f10iter.Message
			}
			f10 = append(f10, f10elem)
		}
		ko.Status.Events = f10
	} else {
		ko.Status.Events = nil
	}
	if resp.Service.HealthCheckGracePeriodSeconds != nil {
		ko.Spec.HealthCheckGracePeriodSeconds = resp.Service.HealthCheckGracePeriodSeconds
	} else {
		ko.Spec.HealthCheckGracePeriodSeconds = nil
	}
	if resp.Service.LaunchType != nil {
		ko.Spec.LaunchType = resp.Service.LaunchType
	} else {
		ko.Spec.LaunchType = nil
	}
	if resp.Service.LoadBalancers != nil {
		f13 := []*svcapitypes.LoadBalancer{}
		for _, f13iter := range resp.Service.LoadBalancers {
			f13elem := &svcapitypes.LoadBalancer{}
			if f13iter.ContainerName != nil {
				f13elem.ContainerName = f13iter.ContainerName
			}
			if f13iter.ContainerPort != nil {
				f13elem.ContainerPort = f13iter.ContainerPort
			}
			if f13iter.LoadBalancerName != nil {
				f13elem.LoadBalancerName = f13iter.LoadBalancerName
			}
			if f13iter.TargetGroupArn != nil {
				f13elem.TargetGroupARN = f13iter.TargetGroupArn
			}
			f13 = append(f13, f13elem)
		}
		ko.Spec.LoadBalancers = f13
	} else {
		ko.Spec.LoadBalancers = nil
	}
	if resp.Service.NetworkConfiguration != nil {
		f14 := &svcapitypes.NetworkConfiguration{}
		if resp.Service.NetworkConfiguration.AwsvpcConfiguration != nil {
			f14f0 := &svcapitypes.AWSVPCConfiguration{}
			if resp.Service.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != nil {
				f14f0.AssignPublicIP = resp.Service.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp
			}
			if resp.Service.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
				f14f0f1 := []*string{}
				for _, f14f0f1iter := range resp.Service.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups {
					var f14f0f1elem string
					f14f0f1elem = *f14f0f1iter
					f14f0f1 = append(f14f0f1, &f14f0f1elem)
				}
				f14f0.SecurityGroups = f14f0f1
			}
			if resp.Service.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
				f14f0f2 := []*string{}
				for _, f14f0f2iter := range resp.Service.NetworkConfiguration.AwsvpcConfiguration.Subnets {
					var f14f0f2elem string
					f14f0f2elem = *f14f0f2iter
					f14f0f2 = append(f14f0f2, &f14f0f2elem)
				}
				f14f0.Subnets = f14f0f2
			}
			f14.AWSVPCConfiguration = f14f0
		}
		ko.Spec.NetworkConfiguration = f14
	} else {
		ko.Spec.NetworkConfiguration = nil
	}
	if resp.Service.PendingCount != nil {
		ko.Status.PendingCount = resp.Service.PendingCount
	} else {
		ko.Status.PendingCount = nil
	}
	if resp.Service.PlacementConstraints != nil {
		f16 := []*svcapitypes.PlacementConstraint{}
		for _, f16iter := range resp.Service.PlacementConstraints {
			f16elem := &svcapitypes.PlacementConstraint{}
			if f16iter.Expression != nil {
				f16elem.Expression = f16iter.Expression
			}
			if f16iter.Type != nil {
				f16elem.Type = f16iter.Type
			}
			f16 = append(f16, f16elem)
		}
		ko.Spec.PlacementConstraints = f16
	} else {
		ko.Spec.PlacementConstraints = nil
	}
	if resp.Service.PlacementStrategy != nil {
		f17 := []*svcapitypes.PlacementStrategy{}
		for _, f17iter := range resp.Service.PlacementStrategy {
			f17elem := &svcapitypes.PlacementStrategy{}
			if f17iter.Field != nil {
				f17elem.Field = f17iter.Field
			}
			if f17iter.Type != nil {
				f17elem.Type = f17iter.Type
			}
			f17 = append(f17, f17elem)
		}
		ko.Spec.PlacementStrategy = f17
	} else {
		ko.Spec.PlacementStrategy = nil
	}
	if resp.Service.PlatformFamily != nil {
		ko.Status.PlatformFamily = resp.Service.PlatformFamily
	} else {
		ko.Status.PlatformFamily = nil
	}
	if resp.Service.PlatformVersion != nil {
		ko.Spec.PlatformVersion = resp.Service.PlatformVersion
	} else {
		ko.Spec.PlatformVersion = nil
	}
	if resp.Service.PropagateTags != nil {
		ko.Spec.PropagateTags = resp.Service.PropagateTags
	} else {
		ko.Spec.PropagateTags = nil
	}
	if resp.Service.RoleArn != nil {
		ko.Status.RoleARN = resp.Service.RoleArn
	} else {
		ko.Status.RoleARN = nil
	}
	if resp.Service.RunningCount != nil {
		ko.Status.RunningCount = resp.Service.RunningCount
	} else {
		ko.Status.RunningCount = nil
	}
	if resp.Service.SchedulingStrategy != nil {
		ko.Spec.SchedulingStrategy = resp.Service.SchedulingStrategy
	} else {
		ko.Spec.SchedulingStrategy = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Service.ServiceArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Service.ServiceArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Service.ServiceName != nil {
		ko.Spec.Name = resp.Service.ServiceName
	} else {
		ko.Spec.Name = nil
	}
	if resp.Service.ServiceRegistries != nil {
		f26 := []*svcapitypes.ServiceRegistry{}
		for _, f26iter := range resp.Service.ServiceRegistries {
			f26elem := &svcapitypes.ServiceRegistry{}
			if f26iter.ContainerName != nil {
				f26elem.ContainerName = f26iter.ContainerName
			}
			if f26iter.ContainerPort != nil {
				f26elem.ContainerPort = f26iter.ContainerPort
			}
			if f26iter.Port != nil {
				f26elem.Port = f26iter.Port
			}
			if f26iter.RegistryArn != nil {
				f26elem.RegistryARN = f26iter.RegistryArn
			}
			f26 = append(f26, f26elem)
		}
		ko.Spec.ServiceRegistries = f26
	} else {
		ko.Spec.ServiceRegistries = nil
	}
	if resp.Service.Status != nil {
		ko.Status.Status = resp.Service.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.Service.Tags != nil {
		f28 := []*svcapitypes.Tag{}
		for _, f28iter := range resp.Service.Tags {
			f28elem := &svcapitypes.Tag{}
			if f28iter.Key != nil {
				f28elem.Key = f28iter.Key
			}
			if f28iter.Value != nil {
				f28elem.Value = f28iter.Value
			}
			f28 = append(f28, f28elem)
		}
		ko.Spec.Tags = f28
	} else {
		ko.Spec.Tags = nil
	}
	if resp.Service.TaskDefinition != nil {
		ko.Spec.TaskDefinition = resp.Service.TaskDefinition
	} else {
		ko.Spec.TaskDefinition = nil
	}
	if resp.Service.TaskSets != nil {
		f30 := []*svcapitypes.TaskSet{}
		for _, f30iter := range resp.Service.TaskSets {
			f30elem := &svcapitypes.TaskSet{}
			if f30iter.CapacityProviderStrategy != nil {
				f30elemf0 := []*svcapitypes.CapacityProviderStrategyItem{}
				for _, f30elemf0iter := range f30iter.CapacityProviderStrategy {
					f30elemf0elem := &svcapitypes.CapacityProviderStrategyItem{}
					if f30elemf0iter.Base != nil {
						f30elemf0elem.Base = f30elemf0iter.Base
					}
					if f30elemf0iter.CapacityProvider != nil {
						f30elemf0elem.CapacityProvider = f30elemf0iter.CapacityProvider
					}
					if f30elemf0iter.Weight != nil {
						f30elemf0elem.Weight = f30elemf0iter.Weight
					}
					f30elemf0 = append(f30elemf0, f30elemf0elem)
				}
				f30elem.CapacityProviderStrategy = f30elemf0
			}
			if f30iter.ClusterArn != nil {
				f30elem.ClusterARN = f30iter.ClusterArn
			}
			if f30iter.ComputedDesiredCount != nil {
				f30elem.ComputedDesiredCount = f30iter.ComputedDesiredCount
			}
			if f30iter.CreatedAt != nil {
				f30elem.CreatedAt = &metav1.Time{*f30iter.CreatedAt}
			}
			if f30iter.ExternalId != nil {
				f30elem.ExternalID = f30iter.ExternalId
			}
			if f30iter.Id != nil {
				f30elem.ID = f30iter.Id
			}
			if f30iter.LaunchType != nil {
				f30elem.LaunchType = f30iter.LaunchType
			}
			if f30iter.LoadBalancers != nil {
				f30elemf7 := []*svcapitypes.LoadBalancer{}
				for _, f30elemf7iter := range f30iter.LoadBalancers {
					f30elemf7elem := &svcapitypes.LoadBalancer{}
					if f30elemf7iter.ContainerName != nil {
						f30elemf7elem.ContainerName = f30elemf7iter.ContainerName
					}
					if f30elemf7iter.ContainerPort != nil {
						f30elemf7elem.ContainerPort = f30elemf7iter.ContainerPort
					}
					if f30elemf7iter.LoadBalancerName != nil {
						f30elemf7elem.LoadBalancerName = f30elemf7iter.LoadBalancerName
					}
					if f30elemf7iter.TargetGroupArn != nil {
						f30elemf7elem.TargetGroupARN = f30elemf7iter.TargetGroupArn
					}
					f30elemf7 = append(f30elemf7, f30elemf7elem)
				}
				f30elem.LoadBalancers = f30elemf7
			}
			if f30iter.NetworkConfiguration != nil {
				f30elemf8 := &svcapitypes.NetworkConfiguration{}
				if f30iter.NetworkConfiguration.AwsvpcConfiguration != nil {
					f30elemf8f0 := &svcapitypes.AWSVPCConfiguration{}
					if f30iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != nil {
						f30elemf8f0.AssignPublicIP = f30iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp
					}
					if f30iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
						f30elemf8f0f1 := []*string{}
						for _, f30elemf8f0f1iter := range f30iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups {
							var f30elemf8f0f1elem string
							f30elemf8f0f1elem = *f30elemf8f0f1iter
							f30elemf8f0f1 = append(f30elemf8f0f1, &f30elemf8f0f1elem)
						}
						f30elemf8f0.SecurityGroups = f30elemf8f0f1
					}
					if f30iter.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
						f30elemf8f0f2 := []*string{}
						for _, f30elemf8f0f2iter := range f30iter.NetworkConfiguration.AwsvpcConfiguration.Subnets {
							var f30elemf8f0f2elem string
							f30elemf8f0f2elem = *f30elemf8f0f2iter
							f30elemf8f0f2 = append(f30elemf8f0f2, &f30elemf8f0f2elem)
						}
						f30elemf8f0.Subnets = f30elemf8f0f2
					}
					f30elemf8.AWSVPCConfiguration = f30elemf8f0
				}
				f30elem.NetworkConfiguration = f30elemf8
			}
			if f30iter.PendingCount != nil {
				f30elem.PendingCount = f30iter.PendingCount
			}
			if f30iter.PlatformFamily != nil {
				f30elem.PlatformFamily = f30iter.PlatformFamily
			}
			if f30iter.PlatformVersion != nil {
				f30elem.PlatformVersion = f30iter.PlatformVersion
			}
			if f30iter.RunningCount != nil {
				f30elem.RunningCount = f30iter.RunningCount
			}
			if f30iter.Scale != nil {
				f30elemf13 := &svcapitypes.Scale{}
				if f30iter.Scale.Unit != nil {
					f30elemf13.Unit = f30iter.Scale.Unit
				}
				if f30iter.Scale.Value != nil {
					f30elemf13.Value = f30iter.Scale.Value
				}
				f30elem.Scale = f30elemf13
			}
			if f30iter.ServiceArn != nil {
				f30elem.ServiceARN = f30iter.ServiceArn
			}
			if f30iter.ServiceRegistries != nil {
				f30elemf15 := []*svcapitypes.ServiceRegistry{}
				for _, f30elemf15iter := range f30iter.ServiceRegistries {
					f30elemf15elem := &svcapitypes.ServiceRegistry{}
					if f30elemf15iter.ContainerName != nil {
						f30elemf15elem.ContainerName = f30elemf15iter.ContainerName
					}
					if f30elemf15iter.ContainerPort != nil {
						f30elemf15elem.ContainerPort = f30elemf15iter.ContainerPort
					}
					if f30elemf15iter.Port != nil {
						f30elemf15elem.Port = f30elemf15iter.Port
					}
					if f30elemf15iter.RegistryArn != nil {
						f30elemf15elem.RegistryARN = f30elemf15iter.RegistryArn
					}
					f30elemf15 = append(f30elemf15, f30elemf15elem)
				}
				f30elem.ServiceRegistries = f30elemf15
			}
			if f30iter.StabilityStatus != nil {
				f30elem.StabilityStatus = f30iter.StabilityStatus
			}
			if f30iter.StabilityStatusAt != nil {
				f30elem.StabilityStatusAt = &metav1.Time{*f30iter.StabilityStatusAt}
			}
			if f30iter.StartedBy != nil {
				f30elem.StartedBy = f30iter.StartedBy
			}
			if f30iter.Status != nil {
				f30elem.Status = f30iter.Status
			}
			if f30iter.Tags != nil {
				f30elemf20 := []*svcapitypes.Tag{}
				for _, f30elemf20iter := range f30iter.Tags {
					f30elemf20elem := &svcapitypes.Tag{}
					if f30elemf20iter.Key != nil {
						f30elemf20elem.Key = f30elemf20iter.Key
					}
					if f30elemf20iter.Value != nil {
						f30elemf20elem.Value = f30elemf20iter.Value
					}
					f30elemf20 = append(f30elemf20, f30elemf20elem)
				}
				f30elem.Tags = f30elemf20
			}
			if f30iter.TaskDefinition != nil {
				f30elem.TaskDefinition = f30iter.TaskDefinition
			}
			if f30iter.TaskSetArn != nil {
				f30elem.TaskSetARN = f30iter.TaskSetArn
			}
			if f30iter.UpdatedAt != nil {
				f30elem.UpdatedAt = &metav1.Time{*f30iter.UpdatedAt}
			}
			f30 = append(f30, f30elem)
		}
		ko.Status.TaskSets = f30
	} else {
		ko.Status.TaskSets = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateServiceInput, error) {
	res := &svcsdk.CreateServiceInput{}

	if r.ko.Spec.CapacityProviderStrategy != nil {
		f0 := []*svcsdk.CapacityProviderStrategyItem{}
		for _, f0iter := range r.ko.Spec.CapacityProviderStrategy {
			f0elem := &svcsdk.CapacityProviderStrategyItem{}
			if f0iter.Base != nil {
				f0elem.SetBase(*f0iter.Base)
			}
			if f0iter.CapacityProvider != nil {
				f0elem.SetCapacityProvider(*f0iter.CapacityProvider)
			}
			if f0iter.Weight != nil {
				f0elem.SetWeight(*f0iter.Weight)
			}
			f0 = append(f0, f0elem)
		}
		res.SetCapacityProviderStrategy(f0)
	}
	if r.ko.Spec.Cluster != nil {
		res.SetCluster(*r.ko.Spec.Cluster)
	}
	if r.ko.Spec.DeploymentConfiguration != nil {
		f2 := &svcsdk.DeploymentConfiguration{}
		if r.ko.Spec.DeploymentConfiguration.Alarms != nil {
			f2f0 := &svcsdk.DeploymentAlarms{}
			if r.ko.Spec.DeploymentConfiguration.Alarms.AlarmNames != nil {
				f2f0f0 := []*string{}
				for _, f2f0f0iter := range r.ko.Spec.DeploymentConfiguration.Alarms.AlarmNames {
					var f2f0f0elem string
					f2f0f0elem = *f2f0f0iter
					f2f0f0 = append(f2f0f0, &f2f0f0elem)
				}
				f2f0.SetAlarmNames(f2f0f0)
			}
			if r.ko.Spec.DeploymentConfiguration.Alarms.Enable != nil {
				f2f0.SetEnable(*r.ko.Spec.DeploymentConfiguration.Alarms.Enable)
			}
			if r.ko.Spec.DeploymentConfiguration.Alarms.Rollback != nil {
				f2f0.SetRollback(*r.ko.Spec.DeploymentConfiguration.Alarms.Rollback)
			}
			f2.SetAlarms(f2f0)
		}
		if r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker != nil {
			f2f1 := &svcsdk.DeploymentCircuitBreaker{}
			if r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker.Enable != nil {
				f2f1.SetEnable(*r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker.Enable)
			}
			if r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback != nil {
				f2f1.SetRollback(*r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback)
			}
			f2.SetDeploymentCircuitBreaker(f2f1)
		}
		if r.ko.Spec.DeploymentConfiguration.MaximumPercent != nil {
			f2.SetMaximumPercent(*r.ko.Spec.DeploymentConfiguration.MaximumPercent)
		}
		if r.ko.Spec.DeploymentConfiguration.MinimumHealthyPercent != nil {
			f2.SetMinimumHealthyPercent(*r.ko.Spec.DeploymentConfiguration.MinimumHealthyPercent)
		}
		res.SetDeploymentConfiguration(f2)
	}
	if r.ko.Spec.DeploymentController != nil {
		f3 := &svcsdk.DeploymentController{}
		if r.ko.Spec.DeploymentController.Type != nil {
			f3.SetType(*r.ko.Spec.DeploymentController.Type)
		}
		res.SetDeploymentController(f3)
	}
	if r.ko.Spec.DesiredCount != nil {
		res.SetDesiredCount(*r.ko.Spec.DesiredCount)
	}
	if r.ko.Spec.EnableECSManagedTags != nil {
		res.SetEnableECSManagedTags(*r.ko.Spec.EnableECSManagedTags)
	}
	if r.ko.Spec.EnableExecuteCommand != nil {
		res.SetEnableExecuteCommand(*r.ko.Spec.EnableExecuteCommand)
	}
	if r.ko.Spec.HealthCheckGracePeriodSeconds != nil {
		res.SetHealthCheckGracePeriodSeconds(*r.ko.Spec.HealthCheckGracePeriodSeconds)
	}
	if r.ko.Spec.LaunchType != nil {
		res.SetLaunchType(*r.ko.Spec.LaunchType)
	}
	if r.ko.Spec.LoadBalancers != nil {
		f9 := []*svcsdk.LoadBalancer{}
		for _, f9iter := range r.ko.Spec.LoadBalancers {
			f9elem := &svcsdk.LoadBalancer{}
			if f9iter.ContainerName != nil {
				f9elem.SetContainerName(*f9iter.ContainerName)
			}
			if f9iter.ContainerPort != nil {
				f9elem.SetContainerPort(*f9iter.ContainerPort)
			}
			if f9iter.LoadBalancerName != nil {
				f9elem.SetLoadBalancerName(*f9iter.LoadBalancerName)
			}
			if f9iter.TargetGroupARN != nil {
				f9elem.SetTargetGroupArn(*f9iter.TargetGroupARN)
			}
			f9 = append(f9, f9elem)
		}
		res.SetLoadBalancers(f9)
	}
	if r.ko.Spec.NetworkConfiguration != nil {
		f10 := &svcsdk.NetworkConfiguration{}
		if r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration != nil {
			f10f0 := &svcsdk.AwsVpcConfiguration{}
			if r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.AssignPublicIP != nil {
				f10f0.SetAssignPublicIp(*r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.AssignPublicIP)
			}
			if r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.SecurityGroups != nil {
				f10f0f1 := []*string{}
				for _, f10f0f1iter := range r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.SecurityGroups {
					var f10f0f1elem string
					f10f0f1elem = *f10f0f1iter
					f10f0f1 = append(f10f0f1, &f10f0f1elem)
				}
				f10f0.SetSecurityGroups(f10f0f1)
			}
			if r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.Subnets != nil {
				f10f0f2 := []*string{}
				for _, f10f0f2iter := range r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.Subnets {
					var f10f0f2elem string
					f10f0f2elem = *f10f0f2iter
					f10f0f2 = append(f10f0f2, &f10f0f2elem)
				}
				f10f0.SetSubnets(f10f0f2)
			}
			f10.SetAwsvpcConfiguration(f10f0)
		}
		res.SetNetworkConfiguration(f10)
	}
	if r.ko.Spec.PlacementConstraints != nil {
		f11 := []*svcsdk.PlacementConstraint{}
		for _, f11iter := range r.ko.Spec.PlacementConstraints {
			f11elem := &svcsdk.PlacementConstraint{}
			if f11iter.Expression != nil {
				f11elem.SetExpression(*f11iter.Expression)
			}
			if f11iter.Type != nil {
				f11elem.SetType(*f11iter.Type)
			}
			f11 = append(f11, f11elem)
		}
		res.SetPlacementConstraints(f11)
	}
	if r.ko.Spec.PlacementStrategy != nil {
		f12 := []*svcsdk.PlacementStrategy{}
		for _, f12iter := range r.ko.Spec.PlacementStrategy {
			f12elem := &svcsdk.PlacementStrategy{}
			if f12iter.Field != nil {
				f12elem.SetField(*f12iter.Field)
			}
			if f12iter.Type != nil {
				f12elem.SetType(*f12iter.Type)
			}
			f12 = append(f12, f12elem)
		}
		res.SetPlacementStrategy(f12)
	}
	if r.ko.Spec.PlatformVersion != nil {
		res.SetPlatformVersion(*r.ko.Spec.PlatformVersion)
	}
	if r.ko.Spec.PropagateTags != nil {
		res.SetPropagateTags(*r.ko.Spec.PropagateTags)
	}
	if r.ko.Spec.Role != nil {
		res.SetRole(*r.ko.Spec.Role)
	}
	if r.ko.Spec.SchedulingStrategy != nil {
		res.SetSchedulingStrategy(*r.ko.Spec.SchedulingStrategy)
	}
	if r.ko.Spec.ServiceConnectConfiguration != nil {
		f17 := &svcsdk.ServiceConnectConfiguration{}
		if r.ko.Spec.ServiceConnectConfiguration.Enabled != nil {
			f17.SetEnabled(*r.ko.Spec.ServiceConnectConfiguration.Enabled)
		}
		if r.ko.Spec.ServiceConnectConfiguration.LogConfiguration != nil {
			f17f1 := &svcsdk.LogConfiguration{}
			if r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.LogDriver != nil {
				f17f1.SetLogDriver(*r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.LogDriver)
			}
			if r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.Options != nil {
				f17f1f1 := map[string]*string{}
				for f17f1f1key, f17f1f1valiter := range r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.Options {
					var f17f1f1val string
					f17f1f1val = *f17f1f1valiter
					f17f1f1[f17f1f1key] = &f17f1f1val
				}
				f17f1.SetOptions(f17f1f1)
			}
			if r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.SecretOptions != nil {
				f17f1f2 := []*svcsdk.Secret{}
				for _, f17f1f2iter := range r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.SecretOptions {
					f17f1f2elem := &svcsdk.Secret{}
					if f17f1f2iter.Name != nil {
						f17f1f2elem.SetName(*f17f1f2iter.Name)
					}
					if f17f1f2iter.ValueFrom != nil {
						f17f1f2elem.SetValueFrom(*f17f1f2iter.ValueFrom)
					}
					f17f1f2 = append(f17f1f2, f17f1f2elem)
				}
				f17f1.SetSecretOptions(f17f1f2)
			}
			f17.SetLogConfiguration(f17f1)
		}
		if r.ko.Spec.ServiceConnectConfiguration.Namespace != nil {
			f17.SetNamespace(*r.ko.Spec.ServiceConnectConfiguration.Namespace)
		}
		if r.ko.Spec.ServiceConnectConfiguration.Services != nil {
			f17f3 := []*svcsdk.ServiceConnectService{}
			for _, f17f3iter := range r.ko.Spec.ServiceConnectConfiguration.Services {
				f17f3elem := &svcsdk.ServiceConnectService{}
				if f17f3iter.ClientAliases != nil {
					f17f3elemf0 := []*svcsdk.ServiceConnectClientAlias{}
					for _, f17f3elemf0iter := range f17f3iter.ClientAliases {
						f17f3elemf0elem := &svcsdk.ServiceConnectClientAlias{}
						if f17f3elemf0iter.DNSName != nil {
							f17f3elemf0elem.SetDnsName(*f17f3elemf0iter.DNSName)
						}
						if f17f3elemf0iter.Port != nil {
							f17f3elemf0elem.SetPort(*f17f3elemf0iter.Port)
						}
						f17f3elemf0 = append(f17f3elemf0, f17f3elemf0elem)
					}
					f17f3elem.SetClientAliases(f17f3elemf0)
				}
				if f17f3iter.DiscoveryName != nil {
					f17f3elem.SetDiscoveryName(*f17f3iter.DiscoveryName)
				}
				if f17f3iter.IngressPortOverride != nil {
					f17f3elem.SetIngressPortOverride(*f17f3iter.IngressPortOverride)
				}
				if f17f3iter.PortName != nil {
					f17f3elem.SetPortName(*f17f3iter.PortName)
				}
				if f17f3iter.Timeout != nil {
					f17f3elemf4 := &svcsdk.TimeoutConfiguration{}
					if f17f3iter.Timeout.IdleTimeoutSeconds != nil {
						f17f3elemf4.SetIdleTimeoutSeconds(*f17f3iter.Timeout.IdleTimeoutSeconds)
					}
					if f17f3iter.Timeout.PerRequestTimeoutSeconds != nil {
						f17f3elemf4.SetPerRequestTimeoutSeconds(*f17f3iter.Timeout.PerRequestTimeoutSeconds)
					}
					f17f3elem.SetTimeout(f17f3elemf4)
				}
				if f17f3iter.TLS != nil {
					f17f3elemf5 := &svcsdk.ServiceConnectTlsConfiguration{}
					if f17f3iter.TLS.IssuerCertificateAuthority != nil {
						f17f3elemf5f0 := &svcsdk.ServiceConnectTlsCertificateAuthority{}
						if f17f3iter.TLS.IssuerCertificateAuthority.AWSPCAAuthorityARN != nil {
							f17f3elemf5f0.SetAwsPcaAuthorityArn(*f17f3iter.TLS.IssuerCertificateAuthority.AWSPCAAuthorityARN)
						}
						f17f3elemf5.SetIssuerCertificateAuthority(f17f3elemf5f0)
					}
					if f17f3iter.TLS.KMSKey != nil {
						f17f3elemf5.SetKmsKey(*f17f3iter.TLS.KMSKey)
					}
					if f17f3iter.TLS.RoleARN != nil {
						f17f3elemf5.SetRoleArn(*f17f3iter.TLS.RoleARN)
					}
					f17f3elem.SetTls(f17f3elemf5)
				}
				f17f3 = append(f17f3, f17f3elem)
			}
			f17.SetServices(f17f3)
		}
		res.SetServiceConnectConfiguration(f17)
	}
	if r.ko.Spec.Name != nil {
		res.SetServiceName(*r.ko.Spec.Name)
	}
	if r.ko.Spec.ServiceRegistries != nil {
		f19 := []*svcsdk.ServiceRegistry{}
		for _, f19iter := range r.ko.Spec.ServiceRegistries {
			f19elem := &svcsdk.ServiceRegistry{}
			if f19iter.ContainerName != nil {
				f19elem.SetContainerName(*f19iter.ContainerName)
			}
			if f19iter.ContainerPort != nil {
				f19elem.SetContainerPort(*f19iter.ContainerPort)
			}
			if f19iter.Port != nil {
				f19elem.SetPort(*f19iter.Port)
			}
			if f19iter.RegistryARN != nil {
				f19elem.SetRegistryArn(*f19iter.RegistryARN)
			}
			f19 = append(f19, f19elem)
		}
		res.SetServiceRegistries(f19)
	}
	if r.ko.Spec.Tags != nil {
		f20 := []*svcsdk.Tag{}
		for _, f20iter := range r.ko.Spec.Tags {
			f20elem := &svcsdk.Tag{}
			if f20iter.Key != nil {
				f20elem.SetKey(*f20iter.Key)
			}
			if f20iter.Value != nil {
				f20elem.SetValue(*f20iter.Value)
			}
			f20 = append(f20, f20elem)
		}
		res.SetTags(f20)
	}
	if r.ko.Spec.TaskDefinition != nil {
		res.SetTaskDefinition(*r.ko.Spec.TaskDefinition)
	}
	if r.ko.Spec.VolumeConfigurations != nil {
		f22 := []*svcsdk.ServiceVolumeConfiguration{}
		for _, f22iter := range r.ko.Spec.VolumeConfigurations {
			f22elem := &svcsdk.ServiceVolumeConfiguration{}
			if f22iter.ManagedEBSVolume != nil {
				f22elemf0 := &svcsdk.ServiceManagedEBSVolumeConfiguration{}
				if f22iter.ManagedEBSVolume.Encrypted != nil {
					f22elemf0.SetEncrypted(*f22iter.ManagedEBSVolume.Encrypted)
				}
				if f22iter.ManagedEBSVolume.FilesystemType != nil {
					f22elemf0.SetFilesystemType(*f22iter.ManagedEBSVolume.FilesystemType)
				}
				if f22iter.ManagedEBSVolume.IOPS != nil {
					f22elemf0.SetIops(*f22iter.ManagedEBSVolume.IOPS)
				}
				if f22iter.ManagedEBSVolume.KMSKeyID != nil {
					f22elemf0.SetKmsKeyId(*f22iter.ManagedEBSVolume.KMSKeyID)
				}
				if f22iter.ManagedEBSVolume.RoleARN != nil {
					f22elemf0.SetRoleArn(*f22iter.ManagedEBSVolume.RoleARN)
				}
				if f22iter.ManagedEBSVolume.SizeInGiB != nil {
					f22elemf0.SetSizeInGiB(*f22iter.ManagedEBSVolume.SizeInGiB)
				}
				if f22iter.ManagedEBSVolume.SnapshotID != nil {
					f22elemf0.SetSnapshotId(*f22iter.ManagedEBSVolume.SnapshotID)
				}
				if f22iter.ManagedEBSVolume.TagSpecifications != nil {
					f22elemf0f7 := []*svcsdk.EBSTagSpecification{}
					for _, f22elemf0f7iter := range f22iter.ManagedEBSVolume.TagSpecifications {
						f22elemf0f7elem := &svcsdk.EBSTagSpecification{}
						if f22elemf0f7iter.PropagateTags != nil {
							f22elemf0f7elem.SetPropagateTags(*f22elemf0f7iter.PropagateTags)
						}
						if f22elemf0f7iter.ResourceType != nil {
							f22elemf0f7elem.SetResourceType(*f22elemf0f7iter.ResourceType)
						}
						if f22elemf0f7iter.Tags != nil {
							f22elemf0f7elemf2 := []*svcsdk.Tag{}
							for _, f22elemf0f7elemf2iter := range f22elemf0f7iter.Tags {
								f22elemf0f7elemf2elem := &svcsdk.Tag{}
								if f22elemf0f7elemf2iter.Key != nil {
									f22elemf0f7elemf2elem.SetKey(*f22elemf0f7elemf2iter.Key)
								}
								if f22elemf0f7elemf2iter.Value != nil {
									f22elemf0f7elemf2elem.SetValue(*f22elemf0f7elemf2iter.Value)
								}
								f22elemf0f7elemf2 = append(f22elemf0f7elemf2, f22elemf0f7elemf2elem)
							}
							f22elemf0f7elem.SetTags(f22elemf0f7elemf2)
						}
						f22elemf0f7 = append(f22elemf0f7, f22elemf0f7elem)
					}
					f22elemf0.SetTagSpecifications(f22elemf0f7)
				}
				if f22iter.ManagedEBSVolume.Throughput != nil {
					f22elemf0.SetThroughput(*f22iter.ManagedEBSVolume.Throughput)
				}
				if f22iter.ManagedEBSVolume.VolumeType != nil {
					f22elemf0.SetVolumeType(*f22iter.ManagedEBSVolume.VolumeType)
				}
				f22elem.SetManagedEBSVolume(f22elemf0)
			}
			if f22iter.Name != nil {
				f22elem.SetName(*f22iter.Name)
			}
			f22 = append(f22, f22elem)
		}
		res.SetVolumeConfigurations(f22)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	if desired.ko.Spec.Name != nil {
		input.SetService(*desired.ko.Spec.Name)
	}

	var resp *svcsdk.UpdateServiceOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateServiceWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateService", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if resp.Service.CapacityProviderStrategy != nil {
		f0 := []*svcapitypes.CapacityProviderStrategyItem{}
		for _, f0iter := range resp.Service.CapacityProviderStrategy {
			f0elem := &svcapitypes.CapacityProviderStrategyItem{}
			if f0iter.Base != nil {
				f0elem.Base = f0iter.Base
			}
			if f0iter.CapacityProvider != nil {
				f0elem.CapacityProvider = f0iter.CapacityProvider
			}
			if f0iter.Weight != nil {
				f0elem.Weight = f0iter.Weight
			}
			f0 = append(f0, f0elem)
		}
		ko.Spec.CapacityProviderStrategy = f0
	} else {
		ko.Spec.CapacityProviderStrategy = nil
	}
	if resp.Service.ClusterArn != nil {
		ko.Status.ClusterARN = resp.Service.ClusterArn
	} else {
		ko.Status.ClusterARN = nil
	}
	if resp.Service.CreatedAt != nil {
		ko.Status.CreatedAt = &metav1.Time{*resp.Service.CreatedAt}
	} else {
		ko.Status.CreatedAt = nil
	}
	if resp.Service.CreatedBy != nil {
		ko.Status.CreatedBy = resp.Service.CreatedBy
	} else {
		ko.Status.CreatedBy = nil
	}
	if resp.Service.DeploymentConfiguration != nil {
		f4 := &svcapitypes.DeploymentConfiguration{}
		if resp.Service.DeploymentConfiguration.Alarms != nil {
			f4f0 := &svcapitypes.DeploymentAlarms{}
			if resp.Service.DeploymentConfiguration.Alarms.AlarmNames != nil {
				f4f0f0 := []*string{}
				for _, f4f0f0iter := range resp.Service.DeploymentConfiguration.Alarms.AlarmNames {
					var f4f0f0elem string
					f4f0f0elem = *f4f0f0iter
					f4f0f0 = append(f4f0f0, &f4f0f0elem)
				}
				f4f0.AlarmNames = f4f0f0
			}
			if resp.Service.DeploymentConfiguration.Alarms.Enable != nil {
				f4f0.Enable = resp.Service.DeploymentConfiguration.Alarms.Enable
			}
			if resp.Service.DeploymentConfiguration.Alarms.Rollback != nil {
				f4f0.Rollback = resp.Service.DeploymentConfiguration.Alarms.Rollback
			}
			f4.Alarms = f4f0
		}
		if resp.Service.DeploymentConfiguration.DeploymentCircuitBreaker != nil {
			f4f1 := &svcapitypes.DeploymentCircuitBreaker{}
			if resp.Service.DeploymentConfiguration.DeploymentCircuitBreaker.Enable != nil {
				f4f1.Enable = resp.Service.DeploymentConfiguration.DeploymentCircuitBreaker.Enable
			}
			if resp.Service.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback != nil {
				f4f1.Rollback = resp.Service.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback
			}
			f4.DeploymentCircuitBreaker = f4f1
		}
		if resp.Service.DeploymentConfiguration.MaximumPercent != nil {
			f4.MaximumPercent = resp.Service.DeploymentConfiguration.MaximumPercent
		}
		if resp.Service.DeploymentConfiguration.MinimumHealthyPercent != nil {
			f4.MinimumHealthyPercent = resp.Service.DeploymentConfiguration.MinimumHealthyPercent
		}
		ko.Spec.DeploymentConfiguration = f4
	} else {
		ko.Spec.DeploymentConfiguration = nil
	}
	if resp.Service.DeploymentController != nil {
		f5 := &svcapitypes.DeploymentController{}
		if resp.Service.DeploymentController.Type != nil {
			f5.Type = resp.Service.DeploymentController.Type
		}
		ko.Spec.DeploymentController = f5
	} else {
		ko.Spec.DeploymentController = nil
	}
	if resp.Service.Deployments != nil {
		f6 := []*svcapitypes.Deployment{}
		for _, f6iter := range resp.Service.Deployments {
			f6elem := &svcapitypes.Deployment{}
			if f6iter.CapacityProviderStrategy != nil {
				f6elemf0 := []*svcapitypes.CapacityProviderStrategyItem{}
				for _, f6elemf0iter := range f6iter.CapacityProviderStrategy {
					f6elemf0elem := &svcapitypes.CapacityProviderStrategyItem{}
					if f6elemf0iter.Base != nil {
						f6elemf0elem.Base = f6elemf0iter.Base
					}
					if f6elemf0iter.CapacityProvider != nil {
						f6elemf0elem.CapacityProvider = f6elemf0iter.CapacityProvider
					}
					if f6elemf0iter.Weight != nil {
						f6elemf0elem.Weight = f6elemf0iter.Weight
					}
					f6elemf0 = append(f6elemf0, f6elemf0elem)
				}
				f6elem.CapacityProviderStrategy = f6elemf0
			}
			if f6iter.CreatedAt != nil {
				f6elem.CreatedAt = &metav1.Time{*f6iter.CreatedAt}
			}
			if f6iter.DesiredCount != nil {
				f6elem.DesiredCount = f6iter.DesiredCount
			}
			if f6iter.FailedTasks != nil {
				f6elem.FailedTasks = f6iter.FailedTasks
			}
			if f6iter.Id != nil {
				f6elem.ID = f6iter.Id
			}
			if f6iter.LaunchType != nil {
				f6elem.LaunchType = f6iter.LaunchType
			}
			if f6iter.NetworkConfiguration != nil {
				f6elemf6 := &svcapitypes.NetworkConfiguration{}
				if f6iter.NetworkConfiguration.AwsvpcConfiguration != nil {
					f6elemf6f0 := &svcapitypes.AWSVPCConfiguration{}
					if f6iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != nil {
						f6elemf6f0.AssignPublicIP = f6iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp
					}
					if f6iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
						f6elemf6f0f1 := []*string{}
						for _, f6elemf6f0f1iter := range f6iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups {
							var f6elemf6f0f1elem string
							f6elemf6f0f1elem = *f6elemf6f0f1iter
							f6elemf6f0f1 = append(f6elemf6f0f1, &f6elemf6f0f1elem)
						}
						f6elemf6f0.SecurityGroups = f6elemf6f0f1
					}
					if f6iter.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
						f6elemf6f0f2 := []*string{}
						for _, f6elemf6f0f2iter := range f6iter.NetworkConfiguration.AwsvpcConfiguration.Subnets {
							var f6elemf6f0f2elem string
							f6elemf6f0f2elem = *f6elemf6f0f2iter
							f6elemf6f0f2 = append(f6elemf6f0f2, &f6elemf6f0f2elem)
						}
						f6elemf6f0.Subnets = f6elemf6f0f2
					}
					f6elemf6.AWSVPCConfiguration = f6elemf6f0
				}
				f6elem.NetworkConfiguration = f6elemf6
			}
			if f6iter.PendingCount != nil {
				f6elem.PendingCount = f6iter.PendingCount
			}
			if f6iter.PlatformFamily != nil {
				f6elem.PlatformFamily = f6iter.PlatformFamily
			}
			if f6iter.PlatformVersion != nil {
				f6elem.PlatformVersion = f6iter.PlatformVersion
			}
			if f6iter.RolloutState != nil {
				f6elem.RolloutState = f6iter.RolloutState
			}
			if f6iter.RolloutStateReason != nil {
				f6elem.RolloutStateReason = f6iter.RolloutStateReason
			}
			if f6iter.RunningCount != nil {
				f6elem.RunningCount = f6iter.RunningCount
			}
			if f6iter.ServiceConnectConfiguration != nil {
				f6elemf13 := &svcapitypes.ServiceConnectConfiguration{}
				if f6iter.ServiceConnectConfiguration.Enabled != nil {
					f6elemf13.Enabled = f6iter.ServiceConnectConfiguration.Enabled
				}
				if f6iter.ServiceConnectConfiguration.LogConfiguration != nil {
					f6elemf13f1 := &svcapitypes.LogConfiguration{}
					if f6iter.ServiceConnectConfiguration.LogConfiguration.LogDriver != nil {
						f6elemf13f1.LogDriver = f6iter.ServiceConnectConfiguration.LogConfiguration.LogDriver
					}
					if f6iter.ServiceConnectConfiguration.LogConfiguration.Options != nil {
						f6elemf13f1f1 := map[string]*string{}
						for f6elemf13f1f1key, f6elemf13f1f1valiter := range f6iter.ServiceConnectConfiguration.LogConfiguration.Options {
							var f6elemf13f1f1val string
							f6elemf13f1f1val = *f6elemf13f1f1valiter
							f6elemf13f1f1[f6elemf13f1f1key] = &f6elemf13f1f1val
						}
						f6elemf13f1.Options = f6elemf13f1f1
					}
					if f6iter.ServiceConnectConfiguration.LogConfiguration.SecretOptions != nil {
						f6elemf13f1f2 := []*svcapitypes.Secret{}
						for _, f6elemf13f1f2iter := range f6iter.ServiceConnectConfiguration.LogConfiguration.SecretOptions {
							f6elemf13f1f2elem := &svcapitypes.Secret{}
							if f6elemf13f1f2iter.Name != nil {
								f6elemf13f1f2elem.Name = f6elemf13f1f2iter.Name
							}
							if f6elemf13f1f2iter.ValueFrom != nil {
								f6elemf13f1f2elem.ValueFrom = f6elemf13f1f2iter.ValueFrom
							}
							f6elemf13f1f2 = append(f6elemf13f1f2, f6elemf13f1f2elem)
						}
						f6elemf13f1.SecretOptions = f6elemf13f1f2
					}
					f6elemf13.LogConfiguration = f6elemf13f1
				}
				if f6iter.ServiceConnectConfiguration.Namespace != nil {
					f6elemf13.Namespace = f6iter.ServiceConnectConfiguration.Namespace
				}
				if f6iter.ServiceConnectConfiguration.Services != nil {
					f6elemf13f3 := []*svcapitypes.ServiceConnectService{}
					for _, f6elemf13f3iter := range f6iter.ServiceConnectConfiguration.Services {
						f6elemf13f3elem := &svcapitypes.ServiceConnectService{}
						if f6elemf13f3iter.ClientAliases != nil {
							f6elemf13f3elemf0 := []*svcapitypes.ServiceConnectClientAlias{}
							for _, f6elemf13f3elemf0iter := range f6elemf13f3iter.ClientAliases {
								f6elemf13f3elemf0elem := &svcapitypes.ServiceConnectClientAlias{}
								if f6elemf13f3elemf0iter.DnsName != nil {
									f6elemf13f3elemf0elem.DNSName = f6elemf13f3elemf0iter.DnsName
								}
								if f6elemf13f3elemf0iter.Port != nil {
									f6elemf13f3elemf0elem.Port = f6elemf13f3elemf0iter.Port
								}
								f6elemf13f3elemf0 = append(f6elemf13f3elemf0, f6elemf13f3elemf0elem)
							}
							f6elemf13f3elem.ClientAliases = f6elemf13f3elemf0
						}
						if f6elemf13f3iter.DiscoveryName != nil {
							f6elemf13f3elem.DiscoveryName = f6elemf13f3iter.DiscoveryName
						}
						if f6elemf13f3iter.IngressPortOverride != nil {
							f6elemf13f3elem.IngressPortOverride = f6elemf13f3iter.IngressPortOverride
						}
						if f6elemf13f3iter.PortName != nil {
							f6elemf13f3elem.PortName = f6elemf13f3iter.PortName
						}
						if f6elemf13f3iter.Timeout != nil {
							f6elemf13f3elemf4 := &svcapitypes.TimeoutConfiguration{}
							if f6elemf13f3iter.Timeout.IdleTimeoutSeconds != nil {
								f6elemf13f3elemf4.IdleTimeoutSeconds = f6elemf13f3iter.Timeout.IdleTimeoutSeconds
							}
							if f6elemf13f3iter.Timeout.PerRequestTimeoutSeconds != nil {
								f6elemf13f3elemf4.PerRequestTimeoutSeconds = f6elemf13f3iter.Timeout.PerRequestTimeoutSeconds
							}
							f6elemf13f3elem.Timeout = f6elemf13f3elemf4
						}
						if f6elemf13f3iter.Tls != nil {
							f6elemf13f3elemf5 := &svcapitypes.ServiceConnecTTLSConfiguration{}
							if f6elemf13f3iter.Tls.IssuerCertificateAuthority != nil {
								f6elemf13f3elemf5f0 := &svcapitypes.ServiceConnecTTLSCertificateAuthority{}
								if f6elemf13f3iter.Tls.IssuerCertificateAuthority.AwsPcaAuthorityArn != nil {
									f6elemf13f3elemf5f0.AWSPCAAuthorityARN = f6elemf13f3iter.Tls.IssuerCertificateAuthority.AwsPcaAuthorityArn
								}
								f6elemf13f3elemf5.IssuerCertificateAuthority = f6elemf13f3elemf5f0
							}
							if f6elemf13f3iter.Tls.KmsKey != nil {
								f6elemf13f3elemf5.KMSKey = f6elemf13f3iter.Tls.KmsKey
							}
							if f6elemf13f3iter.Tls.RoleArn != nil {
								f6elemf13f3elemf5.RoleARN = f6elemf13f3iter.Tls.RoleArn
							}
							f6elemf13f3elem.TLS = f6elemf13f3elemf5
						}
						f6elemf13f3 = append(f6elemf13f3, f6elemf13f3elem)
					}
					f6elemf13.Services = f6elemf13f3
				}
				f6elem.ServiceConnectConfiguration = f6elemf13
			}
			if f6iter.ServiceConnectResources != nil {
				f6elemf14 := []*svcapitypes.ServiceConnectServiceResource{}
				for _, f6elemf14iter := range f6iter.ServiceConnectResources {
					f6elemf14elem := &svcapitypes.ServiceConnectServiceResource{}
					if f6elemf14iter.DiscoveryArn != nil {
						f6elemf14elem.DiscoveryARN = f6elemf14iter.DiscoveryArn
					}
					if f6elemf14iter.DiscoveryName != nil {
						f6elemf14elem.DiscoveryName = f6elemf14iter.DiscoveryName
					}
					f6elemf14 = append(f6elemf14, f6elemf14elem)
				}
				f6elem.ServiceConnectResources = f6elemf14
			}
			if f6iter.Status != nil {
				f6elem.Status = f6iter.Status
			}
			if f6iter.TaskDefinition != nil {
				f6elem.TaskDefinition = f6iter.TaskDefinition
			}
			if f6iter.UpdatedAt != nil {
				f6elem.UpdatedAt = &metav1.Time{*f6iter.UpdatedAt}
			}
			if f6iter.VolumeConfigurations != nil {
				f6elemf18 := []*svcapitypes.ServiceVolumeConfiguration{}
				for _, f6elemf18iter := range f6iter.VolumeConfigurations {
					f6elemf18elem := &svcapitypes.ServiceVolumeConfiguration{}
					if f6elemf18iter.ManagedEBSVolume != nil {
						f6elemf18elemf0 := &svcapitypes.ServiceManagedEBSVolumeConfiguration{}
						if f6elemf18iter.ManagedEBSVolume.Encrypted != nil {
							f6elemf18elemf0.Encrypted = f6elemf18iter.ManagedEBSVolume.Encrypted
						}
						if f6elemf18iter.ManagedEBSVolume.FilesystemType != nil {
							f6elemf18elemf0.FilesystemType = f6elemf18iter.ManagedEBSVolume.FilesystemType
						}
						if f6elemf18iter.ManagedEBSVolume.Iops != nil {
							f6elemf18elemf0.IOPS = f6elemf18iter.ManagedEBSVolume.Iops
						}
						if f6elemf18iter.ManagedEBSVolume.KmsKeyId != nil {
							f6elemf18elemf0.KMSKeyID = f6elemf18iter.ManagedEBSVolume.KmsKeyId
						}
						if f6elemf18iter.ManagedEBSVolume.RoleArn != nil {
							f6elemf18elemf0.RoleARN = f6elemf18iter.ManagedEBSVolume.RoleArn
						}
						if f6elemf18iter.ManagedEBSVolume.SizeInGiB != nil {
							f6elemf18elemf0.SizeInGiB = f6elemf18iter.ManagedEBSVolume.SizeInGiB
						}
						if f6elemf18iter.ManagedEBSVolume.SnapshotId != nil {
							f6elemf18elemf0.SnapshotID = f6elemf18iter.ManagedEBSVolume.SnapshotId
						}
						if f6elemf18iter.ManagedEBSVolume.TagSpecifications != nil {
							f6elemf18elemf0f7 := []*svcapitypes.EBSTagSpecification{}
							for _, f6elemf18elemf0f7iter := range f6elemf18iter.ManagedEBSVolume.TagSpecifications {
								f6elemf18elemf0f7elem := &svcapitypes.EBSTagSpecification{}
								if f6elemf18elemf0f7iter.PropagateTags != nil {
									f6elemf18elemf0f7elem.PropagateTags = f6elemf18elemf0f7iter.PropagateTags
								}
								if f6elemf18elemf0f7iter.ResourceType != nil {
									f6elemf18elemf0f7elem.ResourceType = f6elemf18elemf0f7iter.ResourceType
								}
								if f6elemf18elemf0f7iter.Tags != nil {
									f6elemf18elemf0f7elemf2 := []*svcapitypes.Tag{}
									for _, f6elemf18elemf0f7elemf2iter := range f6elemf18elemf0f7iter.Tags {
										f6elemf18elemf0f7elemf2elem := &svcapitypes.Tag{}
										if f6elemf18elemf0f7elemf2iter.Key != nil {
											f6elemf18elemf0f7elemf2elem.Key = f6elemf18elemf0f7elemf2iter.Key
										}
										if f6elemf18elemf0f7elemf2iter.Value != nil {
											f6elemf18elemf0f7elemf2elem.Value = f6elemf18elemf0f7elemf2iter.Value
										}
										f6elemf18elemf0f7elemf2 = append(f6elemf18elemf0f7elemf2, f6elemf18elemf0f7elemf2elem)
									}
									f6elemf18elemf0f7elem.Tags = f6elemf18elemf0f7elemf2
								}
								f6elemf18elemf0f7 = append(f6elemf18elemf0f7, f6elemf18elemf0f7elem)
							}
							f6elemf18elemf0.TagSpecifications = f6elemf18elemf0f7
						}
						if f6elemf18iter.ManagedEBSVolume.Throughput != nil {
							f6elemf18elemf0.Throughput = f6elemf18iter.ManagedEBSVolume.Throughput
						}
						if f6elemf18iter.ManagedEBSVolume.VolumeType != nil {
							f6elemf18elemf0.VolumeType = f6elemf18iter.ManagedEBSVolume.VolumeType
						}
						f6elemf18elem.ManagedEBSVolume = f6elemf18elemf0
					}
					if f6elemf18iter.Name != nil {
						f6elemf18elem.Name = f6elemf18iter.Name
					}
					f6elemf18 = append(f6elemf18, f6elemf18elem)
				}
				f6elem.VolumeConfigurations = f6elemf18
			}
			f6 = append(f6, f6elem)
		}
		ko.Status.Deployments = f6
	} else {
		ko.Status.Deployments = nil
	}
	if resp.Service.DesiredCount != nil {
		ko.Spec.DesiredCount = resp.Service.DesiredCount
	} else {
		ko.Spec.DesiredCount = nil
	}
	if resp.Service.EnableECSManagedTags != nil {
		ko.Spec.EnableECSManagedTags = resp.Service.EnableECSManagedTags
	} else {
		ko.Spec.EnableECSManagedTags = nil
	}
	if resp.Service.EnableExecuteCommand != nil {
		ko.Spec.EnableExecuteCommand = resp.Service.EnableExecuteCommand
	} else {
		ko.Spec.EnableExecuteCommand = nil
	}
	if resp.Service.Events != nil {
		f10 := []*svcapitypes.ServiceEvent{}
		for _, f10iter := range resp.Service.Events {
			f10elem := &svcapitypes.ServiceEvent{}
			if f10iter.CreatedAt != nil {
				f10elem.CreatedAt = &metav1.Time{*f10iter.CreatedAt}
			}
			if f10iter.Id != nil {
				f10elem.ID = f10iter.Id
			}
			if f10iter.Message != nil {
				f10elem.Message = f10iter.Message
			}
			f10 = append(f10, f10elem)
		}
		ko.Status.Events = f10
	} else {
		ko.Status.Events = nil
	}
	if resp.Service.HealthCheckGracePeriodSeconds != nil {
		ko.Spec.HealthCheckGracePeriodSeconds = resp.Service.HealthCheckGracePeriodSeconds
	} else {
		ko.Spec.HealthCheckGracePeriodSeconds = nil
	}
	if resp.Service.LaunchType != nil {
		ko.Spec.LaunchType = resp.Service.LaunchType
	} else {
		ko.Spec.LaunchType = nil
	}
	if resp.Service.LoadBalancers != nil {
		f13 := []*svcapitypes.LoadBalancer{}
		for _, f13iter := range resp.Service.LoadBalancers {
			f13elem := &svcapitypes.LoadBalancer{}
			if f13iter.ContainerName != nil {
				f13elem.ContainerName = f13iter.ContainerName
			}
			if f13iter.ContainerPort != nil {
				f13elem.ContainerPort = f13iter.ContainerPort
			}
			if f13iter.LoadBalancerName != nil {
				f13elem.LoadBalancerName = f13iter.LoadBalancerName
			}
			if f13iter.TargetGroupArn != nil {
				f13elem.TargetGroupARN = f13iter.TargetGroupArn
			}
			f13 = append(f13, f13elem)
		}
		ko.Spec.LoadBalancers = f13
	} else {
		ko.Spec.LoadBalancers = nil
	}
	if resp.Service.NetworkConfiguration != nil {
		f14 := &svcapitypes.NetworkConfiguration{}
		if resp.Service.NetworkConfiguration.AwsvpcConfiguration != nil {
			f14f0 := &svcapitypes.AWSVPCConfiguration{}
			if resp.Service.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != nil {
				f14f0.AssignPublicIP = resp.Service.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp
			}
			if resp.Service.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
				f14f0f1 := []*string{}
				for _, f14f0f1iter := range resp.Service.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups {
					var f14f0f1elem string
					f14f0f1elem = *f14f0f1iter
					f14f0f1 = append(f14f0f1, &f14f0f1elem)
				}
				f14f0.SecurityGroups = f14f0f1
			}
			if resp.Service.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
				f14f0f2 := []*string{}
				for _, f14f0f2iter := range resp.Service.NetworkConfiguration.AwsvpcConfiguration.Subnets {
					var f14f0f2elem string
					f14f0f2elem = *f14f0f2iter
					f14f0f2 = append(f14f0f2, &f14f0f2elem)
				}
				f14f0.Subnets = f14f0f2
			}
			f14.AWSVPCConfiguration = f14f0
		}
		ko.Spec.NetworkConfiguration = f14
	} else {
		ko.Spec.NetworkConfiguration = nil
	}
	if resp.Service.PendingCount != nil {
		ko.Status.PendingCount = resp.Service.PendingCount
	} else {
		ko.Status.PendingCount = nil
	}
	if resp.Service.PlacementConstraints != nil {
		f16 := []*svcapitypes.PlacementConstraint{}
		for _, f16iter := range resp.Service.PlacementConstraints {
			f16elem := &svcapitypes.PlacementConstraint{}
			if f16iter.Expression != nil {
				f16elem.Expression = f16iter.Expression
			}
			if f16iter.Type != nil {
				f16elem.Type = f16iter.Type
			}
			f16 = append(f16, f16elem)
		}
		ko.Spec.PlacementConstraints = f16
	} else {
		ko.Spec.PlacementConstraints = nil
	}
	if resp.Service.PlacementStrategy != nil {
		f17 := []*svcapitypes.PlacementStrategy{}
		for _, f17iter := range resp.Service.PlacementStrategy {
			f17elem := &svcapitypes.PlacementStrategy{}
			if f17iter.Field != nil {
				f17elem.Field = f17iter.Field
			}
			if f17iter.Type != nil {
				f17elem.Type = f17iter.Type
			}
			f17 = append(f17, f17elem)
		}
		ko.Spec.PlacementStrategy = f17
	} else {
		ko.Spec.PlacementStrategy = nil
	}
	if resp.Service.PlatformFamily != nil {
		ko.Status.PlatformFamily = resp.Service.PlatformFamily
	} else {
		ko.Status.PlatformFamily = nil
	}
	if resp.Service.PlatformVersion != nil {
		ko.Spec.PlatformVersion = resp.Service.PlatformVersion
	} else {
		ko.Spec.PlatformVersion = nil
	}
	if resp.Service.PropagateTags != nil {
		ko.Spec.PropagateTags = resp.Service.PropagateTags
	} else {
		ko.Spec.PropagateTags = nil
	}
	if resp.Service.RoleArn != nil {
		ko.Status.RoleARN = resp.Service.RoleArn
	} else {
		ko.Status.RoleARN = nil
	}
	if resp.Service.RunningCount != nil {
		ko.Status.RunningCount = resp.Service.RunningCount
	} else {
		ko.Status.RunningCount = nil
	}
	if resp.Service.SchedulingStrategy != nil {
		ko.Spec.SchedulingStrategy = resp.Service.SchedulingStrategy
	} else {
		ko.Spec.SchedulingStrategy = nil
	}
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Service.ServiceArn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Service.ServiceArn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Service.ServiceName != nil {
		ko.Spec.Name = resp.Service.ServiceName
	} else {
		ko.Spec.Name = nil
	}
	if resp.Service.ServiceRegistries != nil {
		f26 := []*svcapitypes.ServiceRegistry{}
		for _, f26iter := range resp.Service.ServiceRegistries {
			f26elem := &svcapitypes.ServiceRegistry{}
			if f26iter.ContainerName != nil {
				f26elem.ContainerName = f26iter.ContainerName
			}
			if f26iter.ContainerPort != nil {
				f26elem.ContainerPort = f26iter.ContainerPort
			}
			if f26iter.Port != nil {
				f26elem.Port = f26iter.Port
			}
			if f26iter.RegistryArn != nil {
				f26elem.RegistryARN = f26iter.RegistryArn
			}
			f26 = append(f26, f26elem)
		}
		ko.Spec.ServiceRegistries = f26
	} else {
		ko.Spec.ServiceRegistries = nil
	}
	if resp.Service.Status != nil {
		ko.Status.Status = resp.Service.Status
	} else {
		ko.Status.Status = nil
	}
	if resp.Service.Tags != nil {
		f28 := []*svcapitypes.Tag{}
		for _, f28iter := range resp.Service.Tags {
			f28elem := &svcapitypes.Tag{}
			if f28iter.Key != nil {
				f28elem.Key = f28iter.Key
			}
			if f28iter.Value != nil {
				f28elem.Value = f28iter.Value
			}
			f28 = append(f28, f28elem)
		}
		ko.Spec.Tags = f28
	} else {
		ko.Spec.Tags = nil
	}
	if resp.Service.TaskDefinition != nil {
		ko.Spec.TaskDefinition = resp.Service.TaskDefinition
	} else {
		ko.Spec.TaskDefinition = nil
	}
	if resp.Service.TaskSets != nil {
		f30 := []*svcapitypes.TaskSet{}
		for _, f30iter := range resp.Service.TaskSets {
			f30elem := &svcapitypes.TaskSet{}
			if f30iter.CapacityProviderStrategy != nil {
				f30elemf0 := []*svcapitypes.CapacityProviderStrategyItem{}
				for _, f30elemf0iter := range f30iter.CapacityProviderStrategy {
					f30elemf0elem := &svcapitypes.CapacityProviderStrategyItem{}
					if f30elemf0iter.Base != nil {
						f30elemf0elem.Base = f30elemf0iter.Base
					}
					if f30elemf0iter.CapacityProvider != nil {
						f30elemf0elem.CapacityProvider = f30elemf0iter.CapacityProvider
					}
					if f30elemf0iter.Weight != nil {
						f30elemf0elem.Weight = f30elemf0iter.Weight
					}
					f30elemf0 = append(f30elemf0, f30elemf0elem)
				}
				f30elem.CapacityProviderStrategy = f30elemf0
			}
			if f30iter.ClusterArn != nil {
				f30elem.ClusterARN = f30iter.ClusterArn
			}
			if f30iter.ComputedDesiredCount != nil {
				f30elem.ComputedDesiredCount = f30iter.ComputedDesiredCount
			}
			if f30iter.CreatedAt != nil {
				f30elem.CreatedAt = &metav1.Time{*f30iter.CreatedAt}
			}
			if f30iter.ExternalId != nil {
				f30elem.ExternalID = f30iter.ExternalId
			}
			if f30iter.Id != nil {
				f30elem.ID = f30iter.Id
			}
			if f30iter.LaunchType != nil {
				f30elem.LaunchType = f30iter.LaunchType
			}
			if f30iter.LoadBalancers != nil {
				f30elemf7 := []*svcapitypes.LoadBalancer{}
				for _, f30elemf7iter := range f30iter.LoadBalancers {
					f30elemf7elem := &svcapitypes.LoadBalancer{}
					if f30elemf7iter.ContainerName != nil {
						f30elemf7elem.ContainerName = f30elemf7iter.ContainerName
					}
					if f30elemf7iter.ContainerPort != nil {
						f30elemf7elem.ContainerPort = f30elemf7iter.ContainerPort
					}
					if f30elemf7iter.LoadBalancerName != nil {
						f30elemf7elem.LoadBalancerName = f30elemf7iter.LoadBalancerName
					}
					if f30elemf7iter.TargetGroupArn != nil {
						f30elemf7elem.TargetGroupARN = f30elemf7iter.TargetGroupArn
					}
					f30elemf7 = append(f30elemf7, f30elemf7elem)
				}
				f30elem.LoadBalancers = f30elemf7
			}
			if f30iter.NetworkConfiguration != nil {
				f30elemf8 := &svcapitypes.NetworkConfiguration{}
				if f30iter.NetworkConfiguration.AwsvpcConfiguration != nil {
					f30elemf8f0 := &svcapitypes.AWSVPCConfiguration{}
					if f30iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != nil {
						f30elemf8f0.AssignPublicIP = f30iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp
					}
					if f30iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
						f30elemf8f0f1 := []*string{}
						for _, f30elemf8f0f1iter := range f30iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups {
							var f30elemf8f0f1elem string
							f30elemf8f0f1elem = *f30elemf8f0f1iter
							f30elemf8f0f1 = append(f30elemf8f0f1, &f30elemf8f0f1elem)
						}
						f30elemf8f0.SecurityGroups = f30elemf8f0f1
					}
					if f30iter.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
						f30elemf8f0f2 := []*string{}
						for _, f30elemf8f0f2iter := range f30iter.NetworkConfiguration.AwsvpcConfiguration.Subnets {
							var f30elemf8f0f2elem string
							f30elemf8f0f2elem = *f30elemf8f0f2iter
							f30elemf8f0f2 = append(f30elemf8f0f2, &f30elemf8f0f2elem)
						}
						f30elemf8f0.Subnets = f30elemf8f0f2
					}
					f30elemf8.AWSVPCConfiguration = f30elemf8f0
				}
				f30elem.NetworkConfiguration = f30elemf8
			}
			if f30iter.PendingCount != nil {
				f30elem.PendingCount = f30iter.PendingCount
			}
			if f30iter.PlatformFamily != nil {
				f30elem.PlatformFamily = f30iter.PlatformFamily
			}
			if f30iter.PlatformVersion != nil {
				f30elem.PlatformVersion = f30iter.PlatformVersion
			}
			if f30iter.RunningCount != nil {
				f30elem.RunningCount = f30iter.RunningCount
			}
			if f30iter.Scale != nil {
				f30elemf13 := &svcapitypes.Scale{}
				if f30iter.Scale.Unit != nil {
					f30elemf13.Unit = f30iter.Scale.Unit
				}
				if f30iter.Scale.Value != nil {
					f30elemf13.Value = f30iter.Scale.Value
				}
				f30elem.Scale = f30elemf13
			}
			if f30iter.ServiceArn != nil {
				f30elem.ServiceARN = f30iter.ServiceArn
			}
			if f30iter.ServiceRegistries != nil {
				f30elemf15 := []*svcapitypes.ServiceRegistry{}
				for _, f30elemf15iter := range f30iter.ServiceRegistries {
					f30elemf15elem := &svcapitypes.ServiceRegistry{}
					if f30elemf15iter.ContainerName != nil {
						f30elemf15elem.ContainerName = f30elemf15iter.ContainerName
					}
					if f30elemf15iter.ContainerPort != nil {
						f30elemf15elem.ContainerPort = f30elemf15iter.ContainerPort
					}
					if f30elemf15iter.Port != nil {
						f30elemf15elem.Port = f30elemf15iter.Port
					}
					if f30elemf15iter.RegistryArn != nil {
						f30elemf15elem.RegistryARN = f30elemf15iter.RegistryArn
					}
					f30elemf15 = append(f30elemf15, f30elemf15elem)
				}
				f30elem.ServiceRegistries = f30elemf15
			}
			if f30iter.StabilityStatus != nil {
				f30elem.StabilityStatus = f30iter.StabilityStatus
			}
			if f30iter.StabilityStatusAt != nil {
				f30elem.StabilityStatusAt = &metav1.Time{*f30iter.StabilityStatusAt}
			}
			if f30iter.StartedBy != nil {
				f30elem.StartedBy = f30iter.StartedBy
			}
			if f30iter.Status != nil {
				f30elem.Status = f30iter.Status
			}
			if f30iter.Tags != nil {
				f30elemf20 := []*svcapitypes.Tag{}
				for _, f30elemf20iter := range f30iter.Tags {
					f30elemf20elem := &svcapitypes.Tag{}
					if f30elemf20iter.Key != nil {
						f30elemf20elem.Key = f30elemf20iter.Key
					}
					if f30elemf20iter.Value != nil {
						f30elemf20elem.Value = f30elemf20iter.Value
					}
					f30elemf20 = append(f30elemf20, f30elemf20elem)
				}
				f30elem.Tags = f30elemf20
			}
			if f30iter.TaskDefinition != nil {
				f30elem.TaskDefinition = f30iter.TaskDefinition
			}
			if f30iter.TaskSetArn != nil {
				f30elem.TaskSetARN = f30iter.TaskSetArn
			}
			if f30iter.UpdatedAt != nil {
				f30elem.UpdatedAt = &metav1.Time{*f30iter.UpdatedAt}
			}
			f30 = append(f30, f30elem)
		}
		ko.Status.TaskSets = f30
	} else {
		ko.Status.TaskSets = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateServiceInput, error) {
	res := &svcsdk.UpdateServiceInput{}

	if r.ko.Spec.CapacityProviderStrategy != nil {
		f0 := []*svcsdk.CapacityProviderStrategyItem{}
		for _, f0iter := range r.ko.Spec.CapacityProviderStrategy {
			f0elem := &svcsdk.CapacityProviderStrategyItem{}
			if f0iter.Base != nil {
				f0elem.SetBase(*f0iter.Base)
			}
			if f0iter.CapacityProvider != nil {
				f0elem.SetCapacityProvider(*f0iter.CapacityProvider)
			}
			if f0iter.Weight != nil {
				f0elem.SetWeight(*f0iter.Weight)
			}
			f0 = append(f0, f0elem)
		}
		res.SetCapacityProviderStrategy(f0)
	}
	if r.ko.Spec.Cluster != nil {
		res.SetCluster(*r.ko.Spec.Cluster)
	}
	if r.ko.Spec.DeploymentConfiguration != nil {
		f2 := &svcsdk.DeploymentConfiguration{}
		if r.ko.Spec.DeploymentConfiguration.Alarms != nil {
			f2f0 := &svcsdk.DeploymentAlarms{}
			if r.ko.Spec.DeploymentConfiguration.Alarms.AlarmNames != nil {
				f2f0f0 := []*string{}
				for _, f2f0f0iter := range r.ko.Spec.DeploymentConfiguration.Alarms.AlarmNames {
					var f2f0f0elem string
					f2f0f0elem = *f2f0f0iter
					f2f0f0 = append(f2f0f0, &f2f0f0elem)
				}
				f2f0.SetAlarmNames(f2f0f0)
			}
			if r.ko.Spec.DeploymentConfiguration.Alarms.Enable != nil {
				f2f0.SetEnable(*r.ko.Spec.DeploymentConfiguration.Alarms.Enable)
			}
			if r.ko.Spec.DeploymentConfiguration.Alarms.Rollback != nil {
				f2f0.SetRollback(*r.ko.Spec.DeploymentConfiguration.Alarms.Rollback)
			}
			f2.SetAlarms(f2f0)
		}
		if r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker != nil {
			f2f1 := &svcsdk.DeploymentCircuitBreaker{}
			if r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker.Enable != nil {
				f2f1.SetEnable(*r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker.Enable)
			}
			if r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback != nil {
				f2f1.SetRollback(*r.ko.Spec.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback)
			}
			f2.SetDeploymentCircuitBreaker(f2f1)
		}
		if r.ko.Spec.DeploymentConfiguration.MaximumPercent != nil {
			f2.SetMaximumPercent(*r.ko.Spec.DeploymentConfiguration.MaximumPercent)
		}
		if r.ko.Spec.DeploymentConfiguration.MinimumHealthyPercent != nil {
			f2.SetMinimumHealthyPercent(*r.ko.Spec.DeploymentConfiguration.MinimumHealthyPercent)
		}
		res.SetDeploymentConfiguration(f2)
	}
	if r.ko.Spec.DesiredCount != nil {
		res.SetDesiredCount(*r.ko.Spec.DesiredCount)
	}
	if r.ko.Spec.EnableECSManagedTags != nil {
		res.SetEnableECSManagedTags(*r.ko.Spec.EnableECSManagedTags)
	}
	if r.ko.Spec.EnableExecuteCommand != nil {
		res.SetEnableExecuteCommand(*r.ko.Spec.EnableExecuteCommand)
	}
	if r.ko.Spec.HealthCheckGracePeriodSeconds != nil {
		res.SetHealthCheckGracePeriodSeconds(*r.ko.Spec.HealthCheckGracePeriodSeconds)
	}
	if r.ko.Spec.LoadBalancers != nil {
		f8 := []*svcsdk.LoadBalancer{}
		for _, f8iter := range r.ko.Spec.LoadBalancers {
			f8elem := &svcsdk.LoadBalancer{}
			if f8iter.ContainerName != nil {
				f8elem.SetContainerName(*f8iter.ContainerName)
			}
			if f8iter.ContainerPort != nil {
				f8elem.SetContainerPort(*f8iter.ContainerPort)
			}
			if f8iter.LoadBalancerName != nil {
				f8elem.SetLoadBalancerName(*f8iter.LoadBalancerName)
			}
			if f8iter.TargetGroupARN != nil {
				f8elem.SetTargetGroupArn(*f8iter.TargetGroupARN)
			}
			f8 = append(f8, f8elem)
		}
		res.SetLoadBalancers(f8)
	}
	if r.ko.Spec.NetworkConfiguration != nil {
		f9 := &svcsdk.NetworkConfiguration{}
		if r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration != nil {
			f9f0 := &svcsdk.AwsVpcConfiguration{}
			if r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.AssignPublicIP != nil {
				f9f0.SetAssignPublicIp(*r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.AssignPublicIP)
			}
			if r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.SecurityGroups != nil {
				f9f0f1 := []*string{}
				for _, f9f0f1iter := range r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.SecurityGroups {
					var f9f0f1elem string
					f9f0f1elem = *f9f0f1iter
					f9f0f1 = append(f9f0f1, &f9f0f1elem)
				}
				f9f0.SetSecurityGroups(f9f0f1)
			}
			if r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.Subnets != nil {
				f9f0f2 := []*string{}
				for _, f9f0f2iter := range r.ko.Spec.NetworkConfiguration.AWSVPCConfiguration.Subnets {
					var f9f0f2elem string
					f9f0f2elem = *f9f0f2iter
					f9f0f2 = append(f9f0f2, &f9f0f2elem)
				}
				f9f0.SetSubnets(f9f0f2)
			}
			f9.SetAwsvpcConfiguration(f9f0)
		}
		res.SetNetworkConfiguration(f9)
	}
	if r.ko.Spec.PlacementConstraints != nil {
		f10 := []*svcsdk.PlacementConstraint{}
		for _, f10iter := range r.ko.Spec.PlacementConstraints {
			f10elem := &svcsdk.PlacementConstraint{}
			if f10iter.Expression != nil {
				f10elem.SetExpression(*f10iter.Expression)
			}
			if f10iter.Type != nil {
				f10elem.SetType(*f10iter.Type)
			}
			f10 = append(f10, f10elem)
		}
		res.SetPlacementConstraints(f10)
	}
	if r.ko.Spec.PlacementStrategy != nil {
		f11 := []*svcsdk.PlacementStrategy{}
		for _, f11iter := range r.ko.Spec.PlacementStrategy {
			f11elem := &svcsdk.PlacementStrategy{}
			if f11iter.Field != nil {
				f11elem.SetField(*f11iter.Field)
			}
			if f11iter.Type != nil {
				f11elem.SetType(*f11iter.Type)
			}
			f11 = append(f11, f11elem)
		}
		res.SetPlacementStrategy(f11)
	}
	if r.ko.Spec.PlatformVersion != nil {
		res.SetPlatformVersion(*r.ko.Spec.PlatformVersion)
	}
	if r.ko.Spec.PropagateTags != nil {
		res.SetPropagateTags(*r.ko.Spec.PropagateTags)
	}
	if r.ko.Spec.ServiceConnectConfiguration != nil {
		f15 := &svcsdk.ServiceConnectConfiguration{}
		if r.ko.Spec.ServiceConnectConfiguration.Enabled != nil {
			f15.SetEnabled(*r.ko.Spec.ServiceConnectConfiguration.Enabled)
		}
		if r.ko.Spec.ServiceConnectConfiguration.LogConfiguration != nil {
			f15f1 := &svcsdk.LogConfiguration{}
			if r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.LogDriver != nil {
				f15f1.SetLogDriver(*r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.LogDriver)
			}
			if r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.Options != nil {
				f15f1f1 := map[string]*string{}
				for f15f1f1key, f15f1f1valiter := range r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.Options {
					var f15f1f1val string
					f15f1f1val = *f15f1f1valiter
					f15f1f1[f15f1f1key] = &f15f1f1val
				}
				f15f1.SetOptions(f15f1f1)
			}
			if r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.SecretOptions != nil {
				f15f1f2 := []*svcsdk.Secret{}
				for _, f15f1f2iter := range r.ko.Spec.ServiceConnectConfiguration.LogConfiguration.SecretOptions {
					f15f1f2elem := &svcsdk.Secret{}
					if f15f1f2iter.Name != nil {
						f15f1f2elem.SetName(*f15f1f2iter.Name)
					}
					if f15f1f2iter.ValueFrom != nil {
						f15f1f2elem.SetValueFrom(*f15f1f2iter.ValueFrom)
					}
					f15f1f2 = append(f15f1f2, f15f1f2elem)
				}
				f15f1.SetSecretOptions(f15f1f2)
			}
			f15.SetLogConfiguration(f15f1)
		}
		if r.ko.Spec.ServiceConnectConfiguration.Namespace != nil {
			f15.SetNamespace(*r.ko.Spec.ServiceConnectConfiguration.Namespace)
		}
		if r.ko.Spec.ServiceConnectConfiguration.Services != nil {
			f15f3 := []*svcsdk.ServiceConnectService{}
			for _, f15f3iter := range r.ko.Spec.ServiceConnectConfiguration.Services {
				f15f3elem := &svcsdk.ServiceConnectService{}
				if f15f3iter.ClientAliases != nil {
					f15f3elemf0 := []*svcsdk.ServiceConnectClientAlias{}
					for _, f15f3elemf0iter := range f15f3iter.ClientAliases {
						f15f3elemf0elem := &svcsdk.ServiceConnectClientAlias{}
						if f15f3elemf0iter.DNSName != nil {
							f15f3elemf0elem.SetDnsName(*f15f3elemf0iter.DNSName)
						}
						if f15f3elemf0iter.Port != nil {
							f15f3elemf0elem.SetPort(*f15f3elemf0iter.Port)
						}
						f15f3elemf0 = append(f15f3elemf0, f15f3elemf0elem)
					}
					f15f3elem.SetClientAliases(f15f3elemf0)
				}
				if f15f3iter.DiscoveryName != nil {
					f15f3elem.SetDiscoveryName(*f15f3iter.DiscoveryName)
				}
				if f15f3iter.IngressPortOverride != nil {
					f15f3elem.SetIngressPortOverride(*f15f3iter.IngressPortOverride)
				}
				if f15f3iter.PortName != nil {
					f15f3elem.SetPortName(*f15f3iter.PortName)
				}
				if f15f3iter.Timeout != nil {
					f15f3elemf4 := &svcsdk.TimeoutConfiguration{}
					if f15f3iter.Timeout.IdleTimeoutSeconds != nil {
						f15f3elemf4.SetIdleTimeoutSeconds(*f15f3iter.Timeout.IdleTimeoutSeconds)
					}
					if f15f3iter.Timeout.PerRequestTimeoutSeconds != nil {
						f15f3elemf4.SetPerRequestTimeoutSeconds(*f15f3iter.Timeout.PerRequestTimeoutSeconds)
					}
					f15f3elem.SetTimeout(f15f3elemf4)
				}
				if f15f3iter.TLS != nil {
					f15f3elemf5 := &svcsdk.ServiceConnectTlsConfiguration{}
					if f15f3iter.TLS.IssuerCertificateAuthority != nil {
						f15f3elemf5f0 := &svcsdk.ServiceConnectTlsCertificateAuthority{}
						if f15f3iter.TLS.IssuerCertificateAuthority.AWSPCAAuthorityARN != nil {
							f15f3elemf5f0.SetAwsPcaAuthorityArn(*f15f3iter.TLS.IssuerCertificateAuthority.AWSPCAAuthorityARN)
						}
						f15f3elemf5.SetIssuerCertificateAuthority(f15f3elemf5f0)
					}
					if f15f3iter.TLS.KMSKey != nil {
						f15f3elemf5.SetKmsKey(*f15f3iter.TLS.KMSKey)
					}
					if f15f3iter.TLS.RoleARN != nil {
						f15f3elemf5.SetRoleArn(*f15f3iter.TLS.RoleARN)
					}
					f15f3elem.SetTls(f15f3elemf5)
				}
				f15f3 = append(f15f3, f15f3elem)
			}
			f15.SetServices(f15f3)
		}
		res.SetServiceConnectConfiguration(f15)
	}
	if r.ko.Spec.ServiceRegistries != nil {
		f16 := []*svcsdk.ServiceRegistry{}
		for _, f16iter := range r.ko.Spec.ServiceRegistries {
			f16elem := &svcsdk.ServiceRegistry{}
			if f16iter.ContainerName != nil {
				f16elem.SetContainerName(*f16iter.ContainerName)
			}
			if f16iter.ContainerPort != nil {
				f16elem.SetContainerPort(*f16iter.ContainerPort)
			}
			if f16iter.Port != nil {
				f16elem.SetPort(*f16iter.Port)
			}
			if f16iter.RegistryARN != nil {
				f16elem.SetRegistryArn(*f16iter.RegistryARN)
			}
			f16 = append(f16, f16elem)
		}
		res.SetServiceRegistries(f16)
	}
	if r.ko.Spec.TaskDefinition != nil {
		res.SetTaskDefinition(*r.ko.Spec.TaskDefinition)
	}
	if r.ko.Spec.VolumeConfigurations != nil {
		f18 := []*svcsdk.ServiceVolumeConfiguration{}
		for _, f18iter := range r.ko.Spec.VolumeConfigurations {
			f18elem := &svcsdk.ServiceVolumeConfiguration{}
			if f18iter.ManagedEBSVolume != nil {
				f18elemf0 := &svcsdk.ServiceManagedEBSVolumeConfiguration{}
				if f18iter.ManagedEBSVolume.Encrypted != nil {
					f18elemf0.SetEncrypted(*f18iter.ManagedEBSVolume.Encrypted)
				}
				if f18iter.ManagedEBSVolume.FilesystemType != nil {
					f18elemf0.SetFilesystemType(*f18iter.ManagedEBSVolume.FilesystemType)
				}
				if f18iter.ManagedEBSVolume.IOPS != nil {
					f18elemf0.SetIops(*f18iter.ManagedEBSVolume.IOPS)
				}
				if f18iter.ManagedEBSVolume.KMSKeyID != nil {
					f18elemf0.SetKmsKeyId(*f18iter.ManagedEBSVolume.KMSKeyID)
				}
				if f18iter.ManagedEBSVolume.RoleARN != nil {
					f18elemf0.SetRoleArn(*f18iter.ManagedEBSVolume.RoleARN)
				}
				if f18iter.ManagedEBSVolume.SizeInGiB != nil {
					f18elemf0.SetSizeInGiB(*f18iter.ManagedEBSVolume.SizeInGiB)
				}
				if f18iter.ManagedEBSVolume.SnapshotID != nil {
					f18elemf0.SetSnapshotId(*f18iter.ManagedEBSVolume.SnapshotID)
				}
				if f18iter.ManagedEBSVolume.TagSpecifications != nil {
					f18elemf0f7 := []*svcsdk.EBSTagSpecification{}
					for _, f18elemf0f7iter := range f18iter.ManagedEBSVolume.TagSpecifications {
						f18elemf0f7elem := &svcsdk.EBSTagSpecification{}
						if f18elemf0f7iter.PropagateTags != nil {
							f18elemf0f7elem.SetPropagateTags(*f18elemf0f7iter.PropagateTags)
						}
						if f18elemf0f7iter.ResourceType != nil {
							f18elemf0f7elem.SetResourceType(*f18elemf0f7iter.ResourceType)
						}
						if f18elemf0f7iter.Tags != nil {
							f18elemf0f7elemf2 := []*svcsdk.Tag{}
							for _, f18elemf0f7elemf2iter := range f18elemf0f7iter.Tags {
								f18elemf0f7elemf2elem := &svcsdk.Tag{}
								if f18elemf0f7elemf2iter.Key != nil {
									f18elemf0f7elemf2elem.SetKey(*f18elemf0f7elemf2iter.Key)
								}
								if f18elemf0f7elemf2iter.Value != nil {
									f18elemf0f7elemf2elem.SetValue(*f18elemf0f7elemf2iter.Value)
								}
								f18elemf0f7elemf2 = append(f18elemf0f7elemf2, f18elemf0f7elemf2elem)
							}
							f18elemf0f7elem.SetTags(f18elemf0f7elemf2)
						}
						f18elemf0f7 = append(f18elemf0f7, f18elemf0f7elem)
					}
					f18elemf0.SetTagSpecifications(f18elemf0f7)
				}
				if f18iter.ManagedEBSVolume.Throughput != nil {
					f18elemf0.SetThroughput(*f18iter.ManagedEBSVolume.Throughput)
				}
				if f18iter.ManagedEBSVolume.VolumeType != nil {
					f18elemf0.SetVolumeType(*f18iter.ManagedEBSVolume.VolumeType)
				}
				f18elem.SetManagedEBSVolume(f18elemf0)
			}
			if f18iter.Name != nil {
				f18elem.SetName(*f18iter.Name)
			}
			f18 = append(f18, f18elem)
		}
		res.SetVolumeConfigurations(f18)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if r.ko.Spec.DesiredCount != nil && *r.ko.Spec.DesiredCount > 0 {
		_, err := rm.sdkapi.UpdateServiceWithContext(ctx, &svcsdk.UpdateServiceInput{
			Service:      r.ko.Spec.Name,
			Cluster:      r.ko.Spec.Cluster,
			DesiredCount: aws.Int64(0),
		})
		rm.metrics.RecordAPICall("UPDATE", "UpdateService", err)
		if err != nil {
			return nil, err
		}
	}
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	if r.ko.Spec.Name != nil {
		input.SetService(*r.ko.Spec.Name)
	}
	var resp *svcsdk.DeleteServiceOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteServiceWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteService", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteServiceInput, error) {
	res := &svcsdk.DeleteServiceInput{}

	if r.ko.Spec.Cluster != nil {
		res.SetCluster(*r.ko.Spec.Cluster)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Service,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "InvalidParameterException":
		return true
	default:
		return false
	}
}
